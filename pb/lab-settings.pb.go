// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lab-settings.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LabSettings struct {
	BatchNumber          int32    `protobuf:"varint,1,opt,name=batchNumber,proto3" json:"batchNumber,omitempty"`
	BatchNumberFormat    string   `protobuf:"bytes,2,opt,name=batchNumberFormat,proto3" json:"batchNumberFormat,omitempty"`
	NotifiedAreas        []*Area  `protobuf:"bytes,3,rep,name=notifiedAreas,proto3" json:"notifiedAreas,omitempty"`
	ExpirationDays       int32    `protobuf:"varint,4,opt,name=expirationDays,proto3" json:"expirationDays,omitempty"`
	EntryNumber          int32    `protobuf:"varint,5,opt,name=entryNumber,proto3" json:"entryNumber,omitempty"`
	KaizenHost           string   `protobuf:"bytes,6,opt,name=kaizenHost,proto3" json:"kaizenHost,omitempty"`
	PurchasingGroup      *Group   `protobuf:"bytes,7,opt,name=purchasingGroup,proto3" json:"purchasingGroup,omitempty"`
	QaGroup              *Group   `protobuf:"bytes,8,opt,name=qaGroup,proto3" json:"qaGroup,omitempty"`
	LaboratoryGroup      *Group   `protobuf:"bytes,9,opt,name=laboratoryGroup,proto3" json:"laboratoryGroup,omitempty"`
	AdminGroup           *Group   `protobuf:"bytes,10,opt,name=adminGroup,proto3" json:"adminGroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LabSettings) Reset()         { *m = LabSettings{} }
func (m *LabSettings) String() string { return proto.CompactTextString(m) }
func (*LabSettings) ProtoMessage()    {}
func (*LabSettings) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_settings_2cdfb60b2f7a014d, []int{0}
}
func (m *LabSettings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabSettings.Unmarshal(m, b)
}
func (m *LabSettings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabSettings.Marshal(b, m, deterministic)
}
func (dst *LabSettings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabSettings.Merge(dst, src)
}
func (m *LabSettings) XXX_Size() int {
	return xxx_messageInfo_LabSettings.Size(m)
}
func (m *LabSettings) XXX_DiscardUnknown() {
	xxx_messageInfo_LabSettings.DiscardUnknown(m)
}

var xxx_messageInfo_LabSettings proto.InternalMessageInfo

func (m *LabSettings) GetBatchNumber() int32 {
	if m != nil {
		return m.BatchNumber
	}
	return 0
}

func (m *LabSettings) GetBatchNumberFormat() string {
	if m != nil {
		return m.BatchNumberFormat
	}
	return ""
}

func (m *LabSettings) GetNotifiedAreas() []*Area {
	if m != nil {
		return m.NotifiedAreas
	}
	return nil
}

func (m *LabSettings) GetExpirationDays() int32 {
	if m != nil {
		return m.ExpirationDays
	}
	return 0
}

func (m *LabSettings) GetEntryNumber() int32 {
	if m != nil {
		return m.EntryNumber
	}
	return 0
}

func (m *LabSettings) GetKaizenHost() string {
	if m != nil {
		return m.KaizenHost
	}
	return ""
}

func (m *LabSettings) GetPurchasingGroup() *Group {
	if m != nil {
		return m.PurchasingGroup
	}
	return nil
}

func (m *LabSettings) GetQaGroup() *Group {
	if m != nil {
		return m.QaGroup
	}
	return nil
}

func (m *LabSettings) GetLaboratoryGroup() *Group {
	if m != nil {
		return m.LaboratoryGroup
	}
	return nil
}

func (m *LabSettings) GetAdminGroup() *Group {
	if m != nil {
		return m.AdminGroup
	}
	return nil
}

func init() {
	proto.RegisterType((*LabSettings)(nil), "pb.LabSettings")
}

func init() { proto.RegisterFile("lab-settings.proto", fileDescriptor_lab_settings_2cdfb60b2f7a014d) }

var fileDescriptor_lab_settings_2cdfb60b2f7a014d = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4a, 0xf4, 0x30,
	0x14, 0xc5, 0xe9, 0xf4, 0x9b, 0x3f, 0xbd, 0xe5, 0x53, 0xcc, 0x2a, 0xcc, 0x42, 0x8a, 0x82, 0x54,
	0xd0, 0x2e, 0x66, 0x9e, 0x40, 0x10, 0x75, 0x21, 0x2e, 0xea, 0x13, 0xdc, 0xcc, 0xc4, 0x4e, 0x70,
	0x9a, 0xc4, 0x9b, 0x14, 0xac, 0x6f, 0xe5, 0x1b, 0x4a, 0x9b, 0x11, 0x6a, 0x67, 0x79, 0xce, 0xf9,
	0xf5, 0xf2, 0xa3, 0x01, 0xb6, 0x47, 0x71, 0xeb, 0xa4, 0xf7, 0x4a, 0x57, 0xae, 0xb0, 0x64, 0xbc,
	0x61, 0x13, 0x2b, 0x96, 0x80, 0x24, 0x31, 0xe4, 0x65, 0x5a, 0x91, 0x69, 0x6c, 0x08, 0x17, 0xdf,
	0x31, 0xa4, 0xcf, 0x28, 0x5e, 0x0f, 0x9f, 0xb0, 0x0c, 0x52, 0x81, 0x7e, 0xb3, 0x7b, 0x69, 0x6a,
	0x21, 0x89, 0x47, 0x59, 0x94, 0x4f, 0xcb, 0x61, 0xc5, 0x6e, 0xe0, 0x6c, 0x10, 0x1f, 0x0c, 0xd5,
	0xe8, 0xf9, 0x24, 0x8b, 0xf2, 0xa4, 0x3c, 0x1e, 0x58, 0x01, 0xff, 0xb5, 0xf1, 0xea, 0x4d, 0xc9,
	0xed, 0x1d, 0x49, 0x74, 0x3c, 0xce, 0xe2, 0x3c, 0x5d, 0x2d, 0x0a, 0x2b, 0x8a, 0xae, 0x28, 0xff,
	0xce, 0xec, 0x0a, 0x4e, 0xe4, 0xa7, 0x55, 0x84, 0x5e, 0x19, 0x7d, 0x8f, 0xad, 0xe3, 0xff, 0x7a,
	0x85, 0x51, 0xdb, 0x79, 0x4a, 0xed, 0xa9, 0x3d, 0x78, 0x4e, 0x83, 0xe7, 0xa0, 0x62, 0xe7, 0x00,
	0xef, 0xa8, 0xbe, 0xa4, 0x7e, 0x32, 0xce, 0xf3, 0x59, 0x2f, 0x38, 0x68, 0xd8, 0x1a, 0x4e, 0x6d,
	0x43, 0x9b, 0x1d, 0x3a, 0xa5, 0xab, 0xc7, 0xee, 0x97, 0xf0, 0x79, 0x16, 0xe5, 0xe9, 0x2a, 0xe9,
	0xdc, 0xfa, 0xa2, 0x1c, 0x13, 0xec, 0x12, 0xe6, 0x1f, 0x18, 0xe0, 0xc5, 0x18, 0xfe, 0x5d, 0xba,
	0xcb, 0x7b, 0x14, 0x86, 0xd0, 0x1b, 0x6a, 0x03, 0x9c, 0x1c, 0x5d, 0x1e, 0x11, 0xec, 0x1a, 0x00,
	0xb7, 0xb5, 0xd2, 0x81, 0x87, 0x31, 0x3f, 0x18, 0xc5, 0xac, 0x7f, 0xba, 0xf5, 0x4f, 0x00, 0x00,
	0x00, 0xff, 0xff, 0xac, 0x5e, 0x42, 0x5c, 0xed, 0x01, 0x00, 0x00,
}
