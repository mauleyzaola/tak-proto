// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user-group-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type UserGroupRequest struct {
	UserGroup            *UserGroup `protobuf:"bytes,1,opt,name=UserGroup,proto3" json:"UserGroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UserGroupRequest) Reset()         { *m = UserGroupRequest{} }
func (m *UserGroupRequest) String() string { return proto.CompactTextString(m) }
func (*UserGroupRequest) ProtoMessage()    {}
func (*UserGroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_group_service_b17c57a4e89e9019, []int{0}
}
func (m *UserGroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserGroupRequest.Unmarshal(m, b)
}
func (m *UserGroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserGroupRequest.Marshal(b, m, deterministic)
}
func (dst *UserGroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGroupRequest.Merge(dst, src)
}
func (m *UserGroupRequest) XXX_Size() int {
	return xxx_messageInfo_UserGroupRequest.Size(m)
}
func (m *UserGroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserGroupRequest proto.InternalMessageInfo

func (m *UserGroupRequest) GetUserGroup() *UserGroup {
	if m != nil {
		return m.UserGroup
	}
	return nil
}

type UserGroupListResponse struct {
	Rows                 []*UserGroup `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *UserGroupListResponse) Reset()         { *m = UserGroupListResponse{} }
func (m *UserGroupListResponse) String() string { return proto.CompactTextString(m) }
func (*UserGroupListResponse) ProtoMessage()    {}
func (*UserGroupListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_user_group_service_b17c57a4e89e9019, []int{1}
}
func (m *UserGroupListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserGroupListResponse.Unmarshal(m, b)
}
func (m *UserGroupListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserGroupListResponse.Marshal(b, m, deterministic)
}
func (dst *UserGroupListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserGroupListResponse.Merge(dst, src)
}
func (m *UserGroupListResponse) XXX_Size() int {
	return xxx_messageInfo_UserGroupListResponse.Size(m)
}
func (m *UserGroupListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserGroupListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserGroupListResponse proto.InternalMessageInfo

func (m *UserGroupListResponse) GetRows() []*UserGroup {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*UserGroupRequest)(nil), "pb.UserGroupRequest")
	proto.RegisterType((*UserGroupListResponse)(nil), "pb.UserGroupListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserGroupServiceClient is the client API for UserGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserGroupServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Add(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*Response, error)
	Remove(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupListResponse, error)
}

type userGroupServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserGroupServiceClient(cc *grpc.ClientConn) UserGroupServiceClient {
	return &userGroupServiceClient{cc}
}

func (c *userGroupServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserGroupService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) Add(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserGroupService/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) Remove(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.UserGroupService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGroupServiceClient) List(ctx context.Context, in *UserGroupRequest, opts ...grpc.CallOption) (*UserGroupListResponse, error) {
	out := new(UserGroupListResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGroupService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGroupServiceServer is the server API for UserGroupService service.
type UserGroupServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Add(context.Context, *UserGroupRequest) (*Response, error)
	Remove(context.Context, *UserGroupRequest) (*Response, error)
	List(context.Context, *UserGroupRequest) (*UserGroupListResponse, error)
}

func RegisterUserGroupServiceServer(s *grpc.Server, srv UserGroupServiceServer) {
	s.RegisterService(&_UserGroupService_serviceDesc, srv)
}

func _UserGroupService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGroupService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGroupService/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).Add(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGroupService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).Remove(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGroupService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGroupServiceServer).List(ctx, req.(*UserGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserGroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserGroupService",
	HandlerType: (*UserGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UserGroupService_Ping_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _UserGroupService_Add_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _UserGroupService_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _UserGroupService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user-group-service.proto",
}

func init() {
	proto.RegisterFile("user-group-service.proto", fileDescriptor_user_group_service_b17c57a4e89e9019)
}

var fileDescriptor_user_group_service_b17c57a4e89e9019 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x2d, 0x4e, 0x2d,
	0xd2, 0x4d, 0x2f, 0xca, 0x2f, 0x2d, 0xd0, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x2b, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf,
	0x2b, 0x86, 0x8a, 0x49, 0xf1, 0x16, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x40, 0xb9, 0x02, 0x08,
	0xcd, 0x10, 0x11, 0x25, 0x7b, 0x2e, 0x81, 0xd0, 0xe2, 0xd4, 0x22, 0x77, 0x90, 0x50, 0x10, 0x44,
	0xad, 0x90, 0x36, 0x17, 0x27, 0x5c, 0x4c, 0x82, 0x51, 0x81, 0x51, 0x83, 0xdb, 0x88, 0x57, 0xaf,
	0x20, 0x49, 0x0f, 0xa1, 0x10, 0x21, 0xaf, 0x64, 0xc5, 0x25, 0x0a, 0xe7, 0xf8, 0x64, 0x16, 0x97,
	0x04, 0x41, 0x1d, 0x20, 0xa4, 0xc8, 0xc5, 0x52, 0x94, 0x5f, 0x5e, 0x2c, 0xc1, 0xa8, 0xc0, 0x8c,
	0x69, 0x00, 0x58, 0xca, 0xe8, 0x3c, 0x23, 0x92, 0xed, 0xc1, 0x10, 0xcf, 0x08, 0x29, 0x73, 0xb1,
	0x04, 0x64, 0xe6, 0xa5, 0x0b, 0x71, 0x83, 0x74, 0x40, 0x9d, 0x24, 0xc5, 0x03, 0xe1, 0x40, 0x8c,
	0x56, 0x62, 0x10, 0xd2, 0xe6, 0x62, 0x76, 0x4c, 0x49, 0x11, 0x12, 0x41, 0x35, 0x15, 0x87, 0x62,
	0x3d, 0x2e, 0xb6, 0xa0, 0xd4, 0xdc, 0xfc, 0xb2, 0x54, 0x22, 0xd5, 0x5b, 0x72, 0xb1, 0x80, 0x7c,
	0x82, 0x43, 0xb5, 0x24, 0x8a, 0x28, 0xb2, 0x97, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0xa1, 0x6a, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0x64, 0xe2, 0x72, 0x5a, 0xa6, 0x01, 0x00, 0x00,
}
