// Code generated by protoc-gen-go. DO NOT EDIT.
// source: group-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GroupRequest struct {
	Group                *Group   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupRequest) Reset()         { *m = GroupRequest{} }
func (m *GroupRequest) String() string { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()    {}
func (*GroupRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_service_ed75089be1bcaba4, []int{0}
}
func (m *GroupRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupRequest.Unmarshal(m, b)
}
func (m *GroupRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupRequest.Marshal(b, m, deterministic)
}
func (dst *GroupRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRequest.Merge(dst, src)
}
func (m *GroupRequest) XXX_Size() int {
	return xxx_messageInfo_GroupRequest.Size(m)
}
func (m *GroupRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRequest proto.InternalMessageInfo

func (m *GroupRequest) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GroupResponse struct {
	Group                *Group   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupResponse) Reset()         { *m = GroupResponse{} }
func (m *GroupResponse) String() string { return proto.CompactTextString(m) }
func (*GroupResponse) ProtoMessage()    {}
func (*GroupResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_service_ed75089be1bcaba4, []int{1}
}
func (m *GroupResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupResponse.Unmarshal(m, b)
}
func (m *GroupResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupResponse.Marshal(b, m, deterministic)
}
func (dst *GroupResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupResponse.Merge(dst, src)
}
func (m *GroupResponse) XXX_Size() int {
	return xxx_messageInfo_GroupResponse.Size(m)
}
func (m *GroupResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroupResponse proto.InternalMessageInfo

func (m *GroupResponse) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

type GroupListResponse struct {
	Groups               []*Group `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupListResponse) Reset()         { *m = GroupListResponse{} }
func (m *GroupListResponse) String() string { return proto.CompactTextString(m) }
func (*GroupListResponse) ProtoMessage()    {}
func (*GroupListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_group_service_ed75089be1bcaba4, []int{2}
}
func (m *GroupListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GroupListResponse.Unmarshal(m, b)
}
func (m *GroupListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GroupListResponse.Marshal(b, m, deterministic)
}
func (dst *GroupListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupListResponse.Merge(dst, src)
}
func (m *GroupListResponse) XXX_Size() int {
	return xxx_messageInfo_GroupListResponse.Size(m)
}
func (m *GroupListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GroupListResponse proto.InternalMessageInfo

func (m *GroupListResponse) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func init() {
	proto.RegisterType((*GroupRequest)(nil), "pb.GroupRequest")
	proto.RegisterType((*GroupResponse)(nil), "pb.GroupResponse")
	proto.RegisterType((*GroupListResponse)(nil), "pb.GroupListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GroupServiceClient is the client API for GroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	Create(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	Update(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	Remove(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
	List(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupListResponse, error)
	Validate(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Response, error)
}

type groupServiceClient struct {
	cc *grpc.ClientConn
}

func NewGroupServiceClient(cc *grpc.ClientConn) GroupServiceClient {
	return &groupServiceClient{cc}
}

func (c *groupServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.GroupService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Load(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb.GroupService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Create(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb.GroupService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Update(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb.GroupService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Remove(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := c.cc.Invoke(ctx, "/pb.GroupService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) List(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupListResponse, error) {
	out := new(GroupListResponse)
	err := c.cc.Invoke(ctx, "/pb.GroupService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupServiceClient) Validate(ctx context.Context, in *Group, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.GroupService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupServiceServer is the server API for GroupService service.
type GroupServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Load(context.Context, *GroupRequest) (*GroupResponse, error)
	Create(context.Context, *GroupRequest) (*GroupResponse, error)
	Update(context.Context, *GroupRequest) (*GroupResponse, error)
	Remove(context.Context, *GroupRequest) (*GroupResponse, error)
	List(context.Context, *GroupRequest) (*GroupListResponse, error)
	Validate(context.Context, *Group) (*Response, error)
}

func RegisterGroupServiceServer(s *grpc.Server, srv GroupServiceServer) {
	s.RegisterService(&_GroupService_serviceDesc, srv)
}

func _GroupService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Load(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Create(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Update(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Remove(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).List(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupServiceServer).Validate(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GroupService",
	HandlerType: (*GroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _GroupService_Ping_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _GroupService_Load_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GroupService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GroupService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _GroupService_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GroupService_List_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _GroupService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "group-service.proto",
}

func init() { proto.RegisterFile("group-service.proto", fileDescriptor_group_service_ed75089be1bcaba4) }

var fileDescriptor_group_service_ed75089be1bcaba4 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4e, 0x2f, 0xca, 0x2f,
	0x2d, 0xd0, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0x2a, 0x48, 0x92, 0xe2, 0x2b, 0x4a, 0x2d, 0x2e, 0xc8, 0xcf, 0x2b, 0x86, 0x8a, 0x49, 0xf1,
	0x16, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x40, 0xb9, 0xdc, 0x60, 0x7d, 0x10, 0x8e, 0x92, 0x3e,
	0x17, 0x8f, 0x3b, 0x88, 0x1b, 0x04, 0x51, 0x22, 0x24, 0xcf, 0xc5, 0x0a, 0x96, 0x96, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x36, 0xe2, 0xd4, 0x2b, 0x48, 0xd2, 0x83, 0x28, 0x80, 0x88, 0x2b, 0x19, 0x70,
	0xf1, 0x42, 0x35, 0x40, 0xec, 0x20, 0xac, 0xc3, 0x8c, 0x4b, 0x10, 0xcc, 0xf7, 0xc9, 0x2c, 0x2e,
	0x81, 0xeb, 0x52, 0xe4, 0x62, 0x03, 0xcb, 0x16, 0x4b, 0x30, 0x2a, 0x30, 0xa3, 0x6a, 0x83, 0x4a,
	0x18, 0x9d, 0x67, 0x82, 0xba, 0x2d, 0x18, 0xe2, 0x43, 0x21, 0x65, 0x2e, 0x96, 0x80, 0xcc, 0xbc,
	0x74, 0x21, 0x6e, 0x90, 0x5a, 0xa8, 0x83, 0xa5, 0x78, 0x20, 0x1c, 0x88, 0xb1, 0x4a, 0x0c, 0x42,
	0xba, 0x5c, 0x2c, 0x3e, 0xf9, 0x89, 0x29, 0x42, 0x02, 0x08, 0x03, 0xa1, 0x2a, 0x05, 0x91, 0x44,
	0xe0, 0xca, 0xf5, 0xb9, 0xd8, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x49, 0xd0, 0x10, 0x5a, 0x90,
	0x42, 0x9a, 0x86, 0xa0, 0xd4, 0xdc, 0xfc, 0x32, 0xa2, 0x35, 0x18, 0x72, 0xb1, 0x80, 0x82, 0x0a,
	0x8b, 0x72, 0x51, 0xb8, 0x08, 0x72, 0x58, 0x2a, 0x31, 0x08, 0xa9, 0x72, 0x71, 0x84, 0x25, 0xe6,
	0x64, 0x82, 0x9d, 0x85, 0x08, 0x49, 0xf4, 0xb0, 0x49, 0x62, 0x03, 0xc7, 0xb9, 0x31, 0x20, 0x00,
	0x00, 0xff, 0xff, 0x9b, 0x4c, 0x55, 0xfa, 0x3a, 0x02, 0x00, 0x00,
}
