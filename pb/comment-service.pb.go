// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comment-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommentList struct {
	Comments             []*Comment `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CommentList) Reset()         { *m = CommentList{} }
func (m *CommentList) String() string { return proto.CompactTextString(m) }
func (*CommentList) ProtoMessage()    {}
func (*CommentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_comment_service_43aaddf4fc796e3e, []int{0}
}
func (m *CommentList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommentList.Unmarshal(m, b)
}
func (m *CommentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommentList.Marshal(b, m, deterministic)
}
func (dst *CommentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommentList.Merge(dst, src)
}
func (m *CommentList) XXX_Size() int {
	return xxx_messageInfo_CommentList.Size(m)
}
func (m *CommentList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommentList.DiscardUnknown(m)
}

var xxx_messageInfo_CommentList proto.InternalMessageInfo

func (m *CommentList) GetComments() []*Comment {
	if m != nil {
		return m.Comments
	}
	return nil
}

func init() {
	proto.RegisterType((*CommentList)(nil), "pb.CommentList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommentServiceClient interface {
	Create(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Response, error)
	Remove(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*CommentList, error)
}

type commentServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommentServiceClient(cc *grpc.ClientConn) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) Create(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommentService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Update(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommentService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) Remove(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommentService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) List(ctx context.Context, in *Comment, opts ...grpc.CallOption) (*CommentList, error) {
	out := new(CommentList)
	err := c.cc.Invoke(ctx, "/pb.CommentService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
type CommentServiceServer interface {
	Create(context.Context, *Comment) (*Response, error)
	Update(context.Context, *Comment) (*Response, error)
	Remove(context.Context, *Comment) (*Response, error)
	List(context.Context, *Comment) (*CommentList, error)
}

func RegisterCommentServiceServer(s *grpc.Server, srv CommentServiceServer) {
	s.RegisterService(&_CommentService_serviceDesc, srv)
}

func _CommentService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Create(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Update(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).Remove(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Comment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).List(ctx, req.(*Comment))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CommentService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CommentService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CommentService_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CommentService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comment-service.proto",
}

func init() {
	proto.RegisterFile("comment-service.proto", fileDescriptor_comment_service_43aaddf4fc796e3e)
}

var fileDescriptor_comment_service_43aaddf4fc796e3e = []byte{
	// 169 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4d, 0xce, 0xcf, 0xcd,
	0x4d, 0xcd, 0x2b, 0xd1, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x85, 0x4a, 0x41, 0x84, 0xa4, 0xf8, 0x8a, 0x52, 0x8b,
	0x0b, 0xf2, 0xf3, 0x8a, 0xa1, 0x4a, 0x94, 0xcc, 0xb8, 0xb8, 0x9d, 0x21, 0x0a, 0x7c, 0x32, 0x8b,
	0x4b, 0x84, 0xd4, 0xb9, 0x38, 0xa0, 0xea, 0x8b, 0x25, 0x18, 0x15, 0x98, 0x35, 0xb8, 0x8d, 0xb8,
	0xf5, 0x0a, 0x92, 0xf4, 0xa0, 0x4a, 0x82, 0xe0, 0x92, 0x46, 0x6b, 0x19, 0xb9, 0xf8, 0xa0, 0xa2,
	0xc1, 0x10, 0x3b, 0x85, 0x54, 0xb9, 0xd8, 0x9c, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x85, 0x90, 0xf5,
	0x48, 0xf1, 0x80, 0x38, 0x41, 0x50, 0x5b, 0x95, 0x18, 0x40, 0xca, 0x42, 0x0b, 0x52, 0x88, 0x51,
	0x16, 0x94, 0x9a, 0x9b, 0x5f, 0x46, 0x40, 0x99, 0x1a, 0x17, 0x0b, 0xd8, 0xe1, 0x28, 0x8a, 0xf8,
	0x91, 0x38, 0x20, 0x59, 0x25, 0x86, 0x24, 0x36, 0xb0, 0x77, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x73, 0xa3, 0x4a, 0x97, 0x2a, 0x01, 0x00, 0x00,
}
