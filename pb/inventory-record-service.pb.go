// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inventory-record-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type InventoryRecordList struct {
	Records              []*InventoryRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *InventoryRecordList) Reset()         { *m = InventoryRecordList{} }
func (m *InventoryRecordList) String() string { return proto.CompactTextString(m) }
func (*InventoryRecordList) ProtoMessage()    {}
func (*InventoryRecordList) Descriptor() ([]byte, []int) {
	return fileDescriptor_inventory_record_service_a9d8a4a9b3b0b7dd, []int{0}
}
func (m *InventoryRecordList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InventoryRecordList.Unmarshal(m, b)
}
func (m *InventoryRecordList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InventoryRecordList.Marshal(b, m, deterministic)
}
func (dst *InventoryRecordList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InventoryRecordList.Merge(dst, src)
}
func (m *InventoryRecordList) XXX_Size() int {
	return xxx_messageInfo_InventoryRecordList.Size(m)
}
func (m *InventoryRecordList) XXX_DiscardUnknown() {
	xxx_messageInfo_InventoryRecordList.DiscardUnknown(m)
}

var xxx_messageInfo_InventoryRecordList proto.InternalMessageInfo

func (m *InventoryRecordList) GetRecords() []*InventoryRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

type GridInvRecord struct {
	Grid                 *GridOutput        `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Rows                 []*InventoryRecord `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GridInvRecord) Reset()         { *m = GridInvRecord{} }
func (m *GridInvRecord) String() string { return proto.CompactTextString(m) }
func (*GridInvRecord) ProtoMessage()    {}
func (*GridInvRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_inventory_record_service_a9d8a4a9b3b0b7dd, []int{1}
}
func (m *GridInvRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridInvRecord.Unmarshal(m, b)
}
func (m *GridInvRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridInvRecord.Marshal(b, m, deterministic)
}
func (dst *GridInvRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridInvRecord.Merge(dst, src)
}
func (m *GridInvRecord) XXX_Size() int {
	return xxx_messageInfo_GridInvRecord.Size(m)
}
func (m *GridInvRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_GridInvRecord.DiscardUnknown(m)
}

var xxx_messageInfo_GridInvRecord proto.InternalMessageInfo

func (m *GridInvRecord) GetGrid() *GridOutput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *GridInvRecord) GetRows() []*InventoryRecord {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*InventoryRecordList)(nil), "pb.InventoryRecordList")
	proto.RegisterType((*GridInvRecord)(nil), "pb.GridInvRecord")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// InventoryRecordServiceClient is the client API for InventoryRecordService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InventoryRecordServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Create(ctx context.Context, in *InventoryRecord, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *InventoryRecord, opts ...grpc.CallOption) (*InventoryRecord, error)
	List(ctx context.Context, in *InventoryRecord, opts ...grpc.CallOption) (*InventoryRecordList, error)
	Validate(ctx context.Context, in *InventoryRecord, opts ...grpc.CallOption) (*Response, error)
	Grid(ctx context.Context, in *GridInput, opts ...grpc.CallOption) (*GridInvRecord, error)
}

type inventoryRecordServiceClient struct {
	cc *grpc.ClientConn
}

func NewInventoryRecordServiceClient(cc *grpc.ClientConn) InventoryRecordServiceClient {
	return &inventoryRecordServiceClient{cc}
}

func (c *inventoryRecordServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.InventoryRecordService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryRecordServiceClient) Create(ctx context.Context, in *InventoryRecord, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.InventoryRecordService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryRecordServiceClient) Load(ctx context.Context, in *InventoryRecord, opts ...grpc.CallOption) (*InventoryRecord, error) {
	out := new(InventoryRecord)
	err := c.cc.Invoke(ctx, "/pb.InventoryRecordService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryRecordServiceClient) List(ctx context.Context, in *InventoryRecord, opts ...grpc.CallOption) (*InventoryRecordList, error) {
	out := new(InventoryRecordList)
	err := c.cc.Invoke(ctx, "/pb.InventoryRecordService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryRecordServiceClient) Validate(ctx context.Context, in *InventoryRecord, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.InventoryRecordService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryRecordServiceClient) Grid(ctx context.Context, in *GridInput, opts ...grpc.CallOption) (*GridInvRecord, error) {
	out := new(GridInvRecord)
	err := c.cc.Invoke(ctx, "/pb.InventoryRecordService/Grid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryRecordServiceServer is the server API for InventoryRecordService service.
type InventoryRecordServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Create(context.Context, *InventoryRecord) (*Response, error)
	Load(context.Context, *InventoryRecord) (*InventoryRecord, error)
	List(context.Context, *InventoryRecord) (*InventoryRecordList, error)
	Validate(context.Context, *InventoryRecord) (*Response, error)
	Grid(context.Context, *GridInput) (*GridInvRecord, error)
}

func RegisterInventoryRecordServiceServer(s *grpc.Server, srv InventoryRecordServiceServer) {
	s.RegisterService(&_InventoryRecordService_serviceDesc, srv)
}

func _InventoryRecordService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryRecordServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InventoryRecordService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryRecordServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryRecordService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryRecordServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InventoryRecordService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryRecordServiceServer).Create(ctx, req.(*InventoryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryRecordService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryRecordServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InventoryRecordService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryRecordServiceServer).Load(ctx, req.(*InventoryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryRecordService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryRecordServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InventoryRecordService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryRecordServiceServer).List(ctx, req.(*InventoryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryRecordService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InventoryRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryRecordServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InventoryRecordService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryRecordServiceServer).Validate(ctx, req.(*InventoryRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryRecordService_Grid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GridInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryRecordServiceServer).Grid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.InventoryRecordService/Grid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryRecordServiceServer).Grid(ctx, req.(*GridInput))
	}
	return interceptor(ctx, in, info, handler)
}

var _InventoryRecordService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.InventoryRecordService",
	HandlerType: (*InventoryRecordServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _InventoryRecordService_Ping_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _InventoryRecordService_Create_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _InventoryRecordService_Load_Handler,
		},
		{
			MethodName: "List",
			Handler:    _InventoryRecordService_List_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _InventoryRecordService_Validate_Handler,
		},
		{
			MethodName: "Grid",
			Handler:    _InventoryRecordService_Grid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory-record-service.proto",
}

func init() {
	proto.RegisterFile("inventory-record-service.proto", fileDescriptor_inventory_record_service_a9d8a4a9b3b0b7dd)
}

var fileDescriptor_inventory_record_service_a9d8a4a9b3b0b7dd = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0xdb, 0x1a, 0xa6, 0xdc, 0xda, 0x81, 0x19, 0xcc, 0xd2, 0x07, 0x19, 0xf1, 0xc1, 0x21,
	0xb4, 0x42, 0x05, 0xff, 0x80, 0x82, 0x14, 0x06, 0x4a, 0x05, 0x9f, 0x7c, 0x69, 0xd7, 0x30, 0x02,
	0x92, 0xc4, 0x24, 0xad, 0xf8, 0xc3, 0xfc, 0x7f, 0x92, 0x66, 0x45, 0xa8, 0x15, 0xf6, 0x78, 0xee,
	0xf9, 0x6e, 0xef, 0xe9, 0x09, 0x5c, 0x30, 0xde, 0x51, 0x6e, 0x84, 0xfa, 0x4a, 0x15, 0xdd, 0x0a,
	0xd5, 0xa4, 0x9a, 0xaa, 0x8e, 0x6d, 0x69, 0x26, 0x95, 0x30, 0x02, 0x07, 0xb2, 0x4e, 0x60, 0xa7,
	0x58, 0xe3, 0x74, 0x32, 0x57, 0x54, 0x4b, 0xc1, 0xf5, 0xde, 0x4f, 0x22, 0x45, 0x3f, 0x5a, 0xaa,
	0xcd, 0x5e, 0x2e, 0xc7, 0x9f, 0x73, 0x73, 0xf2, 0x00, 0x8b, 0x62, 0x70, 0xca, 0xde, 0xd8, 0x30,
	0x6d, 0x70, 0x0a, 0xc7, 0x0e, 0xd3, 0xb1, 0xbf, 0x3a, 0x5a, 0x87, 0xf9, 0x22, 0x93, 0x75, 0x36,
	0x22, 0xcb, 0x81, 0x21, 0x6f, 0x10, 0x3d, 0x2a, 0xd6, 0x14, 0xbc, 0x73, 0x0e, 0x26, 0x80, 0x6c,
	0xb6, 0xd8, 0x5f, 0xf9, 0xeb, 0x30, 0x9f, 0xdb, 0x65, 0x0b, 0x3c, 0xb5, 0x46, 0xb6, 0xa6, 0xec,
	0x3d, 0x7c, 0x05, 0x48, 0x89, 0x4f, 0x1d, 0x07, 0xff, 0x1f, 0xe8, 0x81, 0xfc, 0x3b, 0x80, 0xe5,
	0xc8, 0x79, 0x71, 0x5d, 0xe0, 0x4b, 0x40, 0xcf, 0x8c, 0xef, 0x70, 0x68, 0xb7, 0x4b, 0xf7, 0xc7,
	0xc9, 0xa9, 0x13, 0xae, 0x0e, 0xe2, 0xe1, 0x14, 0x66, 0xf7, 0x8a, 0x56, 0x86, 0xe2, 0xa9, 0x23,
	0x7f, 0xf0, 0x1c, 0xd0, 0x46, 0x54, 0xcd, 0x34, 0x3c, 0x35, 0x24, 0x1e, 0xbe, 0x03, 0xd4, 0xf7,
	0x36, 0xb9, 0x73, 0x3e, 0x31, 0xb4, 0x34, 0xf1, 0xf0, 0x0d, 0x9c, 0xbc, 0x56, 0xef, 0xac, 0x39,
	0x38, 0xdc, 0x35, 0x20, 0x5b, 0x24, 0x8e, 0x86, 0x4a, 0x0b, 0x2e, 0x5b, 0x93, 0x9c, 0xfd, 0xca,
	0x6e, 0x08, 0x55, 0xcf, 0xfa, 0x27, 0xbe, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x9d, 0x23,
	0x4b, 0x4b, 0x02, 0x00, 0x00,
}
