// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lab-batch-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LabBatchList struct {
	Batches              []*LabBatch `protobuf:"bytes,1,rep,name=batches,proto3" json:"batches,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LabBatchList) Reset()         { *m = LabBatchList{} }
func (m *LabBatchList) String() string { return proto.CompactTextString(m) }
func (*LabBatchList) ProtoMessage()    {}
func (*LabBatchList) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_batch_service_839ca329e1f076a4, []int{0}
}
func (m *LabBatchList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabBatchList.Unmarshal(m, b)
}
func (m *LabBatchList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabBatchList.Marshal(b, m, deterministic)
}
func (dst *LabBatchList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabBatchList.Merge(dst, src)
}
func (m *LabBatchList) XXX_Size() int {
	return xxx_messageInfo_LabBatchList.Size(m)
}
func (m *LabBatchList) XXX_DiscardUnknown() {
	xxx_messageInfo_LabBatchList.DiscardUnknown(m)
}

var xxx_messageInfo_LabBatchList proto.InternalMessageInfo

func (m *LabBatchList) GetBatches() []*LabBatch {
	if m != nil {
		return m.Batches
	}
	return nil
}

type GridBatchRequest struct {
	Grid                 *GridInput   `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Params               *BatchParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GridBatchRequest) Reset()         { *m = GridBatchRequest{} }
func (m *GridBatchRequest) String() string { return proto.CompactTextString(m) }
func (*GridBatchRequest) ProtoMessage()    {}
func (*GridBatchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_batch_service_839ca329e1f076a4, []int{1}
}
func (m *GridBatchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridBatchRequest.Unmarshal(m, b)
}
func (m *GridBatchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridBatchRequest.Marshal(b, m, deterministic)
}
func (dst *GridBatchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridBatchRequest.Merge(dst, src)
}
func (m *GridBatchRequest) XXX_Size() int {
	return xxx_messageInfo_GridBatchRequest.Size(m)
}
func (m *GridBatchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GridBatchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GridBatchRequest proto.InternalMessageInfo

func (m *GridBatchRequest) GetGrid() *GridInput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *GridBatchRequest) GetParams() *BatchParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type GridBatch struct {
	Grid                 *GridOutput `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Rows                 []*LabBatch `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GridBatch) Reset()         { *m = GridBatch{} }
func (m *GridBatch) String() string { return proto.CompactTextString(m) }
func (*GridBatch) ProtoMessage()    {}
func (*GridBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_batch_service_839ca329e1f076a4, []int{2}
}
func (m *GridBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridBatch.Unmarshal(m, b)
}
func (m *GridBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridBatch.Marshal(b, m, deterministic)
}
func (dst *GridBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridBatch.Merge(dst, src)
}
func (m *GridBatch) XXX_Size() int {
	return xxx_messageInfo_GridBatch.Size(m)
}
func (m *GridBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_GridBatch.DiscardUnknown(m)
}

var xxx_messageInfo_GridBatch proto.InternalMessageInfo

func (m *GridBatch) GetGrid() *GridOutput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *GridBatch) GetRows() []*LabBatch {
	if m != nil {
		return m.Rows
	}
	return nil
}

type BatchParams struct {
	Codes                string               `protobuf:"bytes,1,opt,name=codes,proto3" json:"codes,omitempty"`
	Locations            []string             `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	ExpirationStarts     *timestamp.Timestamp `protobuf:"bytes,3,opt,name=expirationStarts,proto3" json:"expirationStarts,omitempty"`
	ExpirationEnds       *timestamp.Timestamp `protobuf:"bytes,4,opt,name=expirationEnds,proto3" json:"expirationEnds,omitempty"`
	DateStarts           *timestamp.Timestamp `protobuf:"bytes,5,opt,name=dateStarts,proto3" json:"dateStarts,omitempty"`
	DateEnds             *timestamp.Timestamp `protobuf:"bytes,6,opt,name=dateEnds,proto3" json:"dateEnds,omitempty"`
	MinStock             float64              `protobuf:"fixed64,7,opt,name=minStock,proto3" json:"minStock,omitempty"`
	MaxStock             float64              `protobuf:"fixed64,8,opt,name=maxStock,proto3" json:"maxStock,omitempty"`
	Suppliers            []string             `protobuf:"bytes,9,rep,name=suppliers,proto3" json:"suppliers,omitempty"`
	ManufacturedStarts   *timestamp.Timestamp `protobuf:"bytes,10,opt,name=manufacturedStarts,proto3" json:"manufacturedStarts,omitempty"`
	ManufacturedEnds     *timestamp.Timestamp `protobuf:"bytes,11,opt,name=manufacturedEnds,proto3" json:"manufacturedEnds,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *BatchParams) Reset()         { *m = BatchParams{} }
func (m *BatchParams) String() string { return proto.CompactTextString(m) }
func (*BatchParams) ProtoMessage()    {}
func (*BatchParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_batch_service_839ca329e1f076a4, []int{3}
}
func (m *BatchParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BatchParams.Unmarshal(m, b)
}
func (m *BatchParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BatchParams.Marshal(b, m, deterministic)
}
func (dst *BatchParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchParams.Merge(dst, src)
}
func (m *BatchParams) XXX_Size() int {
	return xxx_messageInfo_BatchParams.Size(m)
}
func (m *BatchParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchParams.DiscardUnknown(m)
}

var xxx_messageInfo_BatchParams proto.InternalMessageInfo

func (m *BatchParams) GetCodes() string {
	if m != nil {
		return m.Codes
	}
	return ""
}

func (m *BatchParams) GetLocations() []string {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *BatchParams) GetExpirationStarts() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationStarts
	}
	return nil
}

func (m *BatchParams) GetExpirationEnds() *timestamp.Timestamp {
	if m != nil {
		return m.ExpirationEnds
	}
	return nil
}

func (m *BatchParams) GetDateStarts() *timestamp.Timestamp {
	if m != nil {
		return m.DateStarts
	}
	return nil
}

func (m *BatchParams) GetDateEnds() *timestamp.Timestamp {
	if m != nil {
		return m.DateEnds
	}
	return nil
}

func (m *BatchParams) GetMinStock() float64 {
	if m != nil {
		return m.MinStock
	}
	return 0
}

func (m *BatchParams) GetMaxStock() float64 {
	if m != nil {
		return m.MaxStock
	}
	return 0
}

func (m *BatchParams) GetSuppliers() []string {
	if m != nil {
		return m.Suppliers
	}
	return nil
}

func (m *BatchParams) GetManufacturedStarts() *timestamp.Timestamp {
	if m != nil {
		return m.ManufacturedStarts
	}
	return nil
}

func (m *BatchParams) GetManufacturedEnds() *timestamp.Timestamp {
	if m != nil {
		return m.ManufacturedEnds
	}
	return nil
}

func init() {
	proto.RegisterType((*LabBatchList)(nil), "pb.LabBatchList")
	proto.RegisterType((*GridBatchRequest)(nil), "pb.GridBatchRequest")
	proto.RegisterType((*GridBatch)(nil), "pb.GridBatch")
	proto.RegisterType((*BatchParams)(nil), "pb.BatchParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LabBatchServiceClient is the client API for LabBatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LabBatchServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *Request, opts ...grpc.CallOption) (*LabBatch, error)
	Create(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*LabBatchList, error)
	Validate(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*Response, error)
	GenBatchCode(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*LabBatch, error)
	Grid(ctx context.Context, in *GridBatchRequest, opts ...grpc.CallOption) (*GridBatch, error)
}

type labBatchServiceClient struct {
	cc *grpc.ClientConn
}

func NewLabBatchServiceClient(cc *grpc.ClientConn) LabBatchServiceClient {
	return &labBatchServiceClient{cc}
}

func (c *labBatchServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabBatchService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labBatchServiceClient) Load(ctx context.Context, in *Request, opts ...grpc.CallOption) (*LabBatch, error) {
	out := new(LabBatch)
	err := c.cc.Invoke(ctx, "/pb.LabBatchService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labBatchServiceClient) Create(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabBatchService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labBatchServiceClient) Update(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabBatchService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labBatchServiceClient) List(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*LabBatchList, error) {
	out := new(LabBatchList)
	err := c.cc.Invoke(ctx, "/pb.LabBatchService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labBatchServiceClient) Validate(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabBatchService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labBatchServiceClient) GenBatchCode(ctx context.Context, in *LabBatch, opts ...grpc.CallOption) (*LabBatch, error) {
	out := new(LabBatch)
	err := c.cc.Invoke(ctx, "/pb.LabBatchService/GenBatchCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labBatchServiceClient) Grid(ctx context.Context, in *GridBatchRequest, opts ...grpc.CallOption) (*GridBatch, error) {
	out := new(GridBatch)
	err := c.cc.Invoke(ctx, "/pb.LabBatchService/Grid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabBatchServiceServer is the server API for LabBatchService service.
type LabBatchServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Load(context.Context, *Request) (*LabBatch, error)
	Create(context.Context, *LabBatch) (*Response, error)
	Update(context.Context, *LabBatch) (*Response, error)
	List(context.Context, *LabBatch) (*LabBatchList, error)
	Validate(context.Context, *LabBatch) (*Response, error)
	GenBatchCode(context.Context, *LabBatch) (*LabBatch, error)
	Grid(context.Context, *GridBatchRequest) (*GridBatch, error)
}

func RegisterLabBatchServiceServer(s *grpc.Server, srv LabBatchServiceServer) {
	s.RegisterService(&_LabBatchService_serviceDesc, srv)
}

func _LabBatchService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabBatchServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabBatchService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabBatchServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabBatchService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabBatchServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabBatchService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabBatchServiceServer).Load(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabBatchService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabBatchServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabBatchService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabBatchServiceServer).Create(ctx, req.(*LabBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabBatchService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabBatchServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabBatchService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabBatchServiceServer).Update(ctx, req.(*LabBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabBatchService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabBatchServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabBatchService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabBatchServiceServer).List(ctx, req.(*LabBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabBatchService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabBatchServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabBatchService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabBatchServiceServer).Validate(ctx, req.(*LabBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabBatchService_GenBatchCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabBatchServiceServer).GenBatchCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabBatchService/GenBatchCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabBatchServiceServer).GenBatchCode(ctx, req.(*LabBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabBatchService_Grid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GridBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabBatchServiceServer).Grid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabBatchService/Grid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabBatchServiceServer).Grid(ctx, req.(*GridBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LabBatchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LabBatchService",
	HandlerType: (*LabBatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LabBatchService_Ping_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _LabBatchService_Load_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LabBatchService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LabBatchService_Update_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LabBatchService_List_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _LabBatchService_Validate_Handler,
		},
		{
			MethodName: "GenBatchCode",
			Handler:    _LabBatchService_GenBatchCode_Handler,
		},
		{
			MethodName: "Grid",
			Handler:    _LabBatchService_Grid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lab-batch-service.proto",
}

func init() {
	proto.RegisterFile("lab-batch-service.proto", fileDescriptor_lab_batch_service_839ca329e1f076a4)
}

var fileDescriptor_lab_batch_service_839ca329e1f076a4 = []byte{
	// 533 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x5d, 0xba, 0xac, 0x6b, 0x6f, 0x3f, 0x65, 0x4d, 0x22, 0x8a, 0x90, 0x28, 0x41, 0x2a, 0x7d,
	0xa0, 0x99, 0x54, 0xa4, 0x3d, 0xf0, 0xb8, 0x09, 0x26, 0x50, 0x25, 0x46, 0x0a, 0x3c, 0x22, 0x39,
	0x89, 0x57, 0x2c, 0xda, 0xd8, 0xd8, 0x0e, 0xec, 0x3f, 0xf1, 0x97, 0xf8, 0x31, 0xc8, 0x76, 0x92,
	0xa6, 0x6b, 0xa5, 0xf0, 0x96, 0x73, 0xcf, 0xb9, 0xc7, 0xf7, 0x5e, 0xfb, 0x06, 0x9e, 0x6c, 0x70,
	0x3c, 0x8f, 0xb1, 0x4a, 0xbe, 0xcf, 0x25, 0x11, 0xbf, 0x68, 0x42, 0x42, 0x2e, 0x98, 0x62, 0xa8,
	0xc5, 0x63, 0x7f, 0x54, 0x91, 0x36, 0xe8, 0x0f, 0x04, 0xf9, 0x99, 0x13, 0xa9, 0x0a, 0x38, 0x14,
	0x44, 0x72, 0x96, 0xc9, 0x22, 0xc7, 0x87, 0xb5, 0xa0, 0x69, 0xf1, 0xfd, 0x6c, 0xcd, 0xd8, 0x7a,
	0x43, 0x2e, 0x0d, 0x8a, 0xf3, 0xfb, 0x4b, 0x45, 0xb7, 0x44, 0x2a, 0xbc, 0xe5, 0x56, 0x10, 0x5c,
	0x41, 0x7f, 0x89, 0xe3, 0x6b, 0xed, 0xbe, 0xa4, 0x52, 0xa1, 0x29, 0x9c, 0x9b, 0xa3, 0x88, 0xf4,
	0x9c, 0xc9, 0xe9, 0xac, 0xb7, 0xe8, 0x87, 0x3c, 0x0e, 0x4b, 0x49, 0x54, 0x92, 0xc1, 0x37, 0x18,
	0xdf, 0x0a, 0x9a, 0xda, 0xa8, 0x2d, 0x07, 0x3d, 0x07, 0x57, 0x1f, 0xed, 0x39, 0x13, 0x67, 0xd6,
	0x5b, 0x0c, 0x74, 0xa2, 0xd6, 0xbc, 0xcf, 0x78, 0xae, 0x22, 0x43, 0xa1, 0x97, 0xd0, 0xe6, 0x58,
	0xe0, 0xad, 0xf4, 0x5a, 0x46, 0x34, 0xd2, 0x22, 0x63, 0x72, 0x67, 0xc2, 0x51, 0x41, 0x07, 0x9f,
	0xa0, 0x5b, 0xf9, 0xa3, 0x60, 0xcf, 0x78, 0x58, 0x1a, 0x7f, 0xcc, 0xd5, 0xce, 0x79, 0x02, 0xae,
	0x60, 0xbf, 0xb5, 0xef, 0x61, 0xd5, 0x86, 0x09, 0xfe, 0xb8, 0xd0, 0xab, 0x1d, 0x85, 0x2e, 0xe0,
	0x2c, 0x61, 0xa9, 0x69, 0xd4, 0x99, 0x75, 0x23, 0x0b, 0xd0, 0x53, 0xe8, 0x6e, 0x58, 0x82, 0x15,
	0x65, 0x99, 0x35, 0xeb, 0x46, 0xbb, 0x00, 0x7a, 0x07, 0x63, 0xf2, 0xc0, 0xa9, 0x30, 0x70, 0xa5,
	0xb0, 0x50, 0xd2, 0x3b, 0x35, 0x55, 0xf9, 0xa1, 0x1d, 0x75, 0x58, 0x8e, 0x3a, 0xfc, 0x5c, 0x8e,
	0x3a, 0x3a, 0xc8, 0x41, 0xd7, 0x30, 0xdc, 0xc5, 0xde, 0x66, 0xa9, 0xf4, 0xdc, 0x46, 0x97, 0x47,
	0x19, 0xe8, 0x0d, 0x40, 0x8a, 0x15, 0x29, 0xaa, 0x38, 0x6b, 0xcc, 0xaf, 0xa9, 0xd1, 0x15, 0x74,
	0x34, 0x32, 0x27, 0xb7, 0x1b, 0x33, 0x2b, 0x2d, 0xf2, 0xa1, 0xb3, 0xa5, 0xd9, 0x4a, 0xb1, 0xe4,
	0x87, 0x77, 0x3e, 0x71, 0x66, 0x4e, 0x54, 0x61, 0xc3, 0xe1, 0x07, 0xcb, 0x75, 0x0a, 0xae, 0xc0,
	0x7a, 0xaa, 0x32, 0xe7, 0x7c, 0x43, 0x89, 0x90, 0x5e, 0xd7, 0x4e, 0xb5, 0x0a, 0xa0, 0x0f, 0x80,
	0xb6, 0x38, 0xcb, 0xef, 0x71, 0xa2, 0x72, 0x41, 0xd2, 0xa2, 0x23, 0x68, 0xac, 0xeb, 0x48, 0x96,
	0xbe, 0xa1, 0x7a, 0xd4, 0x74, 0xd8, 0x6b, 0xbe, 0xa1, 0xc7, 0x39, 0x8b, 0xbf, 0x2d, 0x18, 0x95,
	0x0f, 0x68, 0x65, 0x77, 0x12, 0xbd, 0x00, 0xf7, 0x8e, 0x66, 0x6b, 0xd4, 0xd3, 0xaf, 0xab, 0x78,
	0xf5, 0x7e, 0xdf, 0x02, 0xbb, 0x82, 0xc1, 0x89, 0x16, 0x2d, 0x19, 0x4e, 0x8f, 0x88, 0x4a, 0xbb,
	0xe0, 0x04, 0x4d, 0xa1, 0x7d, 0x23, 0x08, 0x56, 0x04, 0xed, 0x31, 0x07, 0x66, 0x53, 0x68, 0x7f,
	0xe1, 0x69, 0xb3, 0x6e, 0x06, 0xae, 0x59, 0xdf, 0x7d, 0xd5, 0xb8, 0x8e, 0x34, 0x6f, 0x94, 0x9d,
	0xaf, 0x78, 0x43, 0xff, 0xc3, 0xf3, 0x15, 0xf4, 0x6f, 0x49, 0x66, 0xb8, 0x1b, 0x96, 0x1e, 0x55,
	0xd7, 0x3a, 0x9a, 0x83, 0xab, 0x77, 0x12, 0x5d, 0x94, 0xdb, 0x59, 0xff, 0x35, 0xf8, 0x83, 0xbd,
	0x68, 0x70, 0x12, 0xb7, 0xcd, 0x25, 0xbc, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x7c, 0x6d, 0xf9,
	0x3d, 0xfa, 0x04, 0x00, 0x00,
}
