// Code generated by protoc-gen-go. DO NOT EDIT.
// source: scheduled-event-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Schedules struct {
	Events               *ScheduledEvents     `protobuf:"bytes,1,opt,name=events,proto3" json:"events,omitempty"`
	When                 *timestamp.Timestamp `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Schedules) Reset()         { *m = Schedules{} }
func (m *Schedules) String() string { return proto.CompactTextString(m) }
func (*Schedules) ProtoMessage()    {}
func (*Schedules) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduled_event_service_34edcce76353935a, []int{0}
}
func (m *Schedules) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Schedules.Unmarshal(m, b)
}
func (m *Schedules) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Schedules.Marshal(b, m, deterministic)
}
func (dst *Schedules) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Schedules.Merge(dst, src)
}
func (m *Schedules) XXX_Size() int {
	return xxx_messageInfo_Schedules.Size(m)
}
func (m *Schedules) XXX_DiscardUnknown() {
	xxx_messageInfo_Schedules.DiscardUnknown(m)
}

var xxx_messageInfo_Schedules proto.InternalMessageInfo

func (m *Schedules) GetEvents() *ScheduledEvents {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Schedules) GetWhen() *timestamp.Timestamp {
	if m != nil {
		return m.When
	}
	return nil
}

type ListEventFilter struct {
	Sent                 bool     `protobuf:"varint,1,opt,name=sent,proto3" json:"sent,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEventFilter) Reset()         { *m = ListEventFilter{} }
func (m *ListEventFilter) String() string { return proto.CompactTextString(m) }
func (*ListEventFilter) ProtoMessage()    {}
func (*ListEventFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_scheduled_event_service_34edcce76353935a, []int{1}
}
func (m *ListEventFilter) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEventFilter.Unmarshal(m, b)
}
func (m *ListEventFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEventFilter.Marshal(b, m, deterministic)
}
func (dst *ListEventFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEventFilter.Merge(dst, src)
}
func (m *ListEventFilter) XXX_Size() int {
	return xxx_messageInfo_ListEventFilter.Size(m)
}
func (m *ListEventFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEventFilter.DiscardUnknown(m)
}

var xxx_messageInfo_ListEventFilter proto.InternalMessageInfo

func (m *ListEventFilter) GetSent() bool {
	if m != nil {
		return m.Sent
	}
	return false
}

func init() {
	proto.RegisterType((*Schedules)(nil), "pb.Schedules")
	proto.RegisterType((*ListEventFilter)(nil), "pb.ListEventFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScheduledEventServiceClient is the client API for ScheduledEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScheduledEventServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*ScheduledEvent, error)
	Remove(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*Response, error)
	Create(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*Response, error)
	// should return those events which haven't expired yet
	NextSchedules(ctx context.Context, in *Schedules, opts ...grpc.CallOption) (*ScheduledEvents, error)
	// should return those events which are expired
	ExpiredSchedules(ctx context.Context, in *Schedules, opts ...grpc.CallOption) (*ScheduledEvents, error)
	List(ctx context.Context, in *ListEventFilter, opts ...grpc.CallOption) (*ScheduledEvents, error)
	Validate(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*Response, error)
	LoadBySourceId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ScheduledEvents, error)
}

type scheduledEventServiceClient struct {
	cc *grpc.ClientConn
}

func NewScheduledEventServiceClient(cc *grpc.ClientConn) ScheduledEventServiceClient {
	return &scheduledEventServiceClient{cc}
}

func (c *scheduledEventServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) Load(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*ScheduledEvent, error) {
	out := new(ScheduledEvent)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) Remove(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) Create(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) Update(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) NextSchedules(ctx context.Context, in *Schedules, opts ...grpc.CallOption) (*ScheduledEvents, error) {
	out := new(ScheduledEvents)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/NextSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) ExpiredSchedules(ctx context.Context, in *Schedules, opts ...grpc.CallOption) (*ScheduledEvents, error) {
	out := new(ScheduledEvents)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/ExpiredSchedules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) List(ctx context.Context, in *ListEventFilter, opts ...grpc.CallOption) (*ScheduledEvents, error) {
	out := new(ScheduledEvents)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) Validate(ctx context.Context, in *ScheduledEvent, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *scheduledEventServiceClient) LoadBySourceId(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ScheduledEvents, error) {
	out := new(ScheduledEvents)
	err := c.cc.Invoke(ctx, "/pb.ScheduledEventService/LoadBySourceId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScheduledEventServiceServer is the server API for ScheduledEventService service.
type ScheduledEventServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Load(context.Context, *ScheduledEvent) (*ScheduledEvent, error)
	Remove(context.Context, *ScheduledEvent) (*Response, error)
	Create(context.Context, *ScheduledEvent) (*Response, error)
	Update(context.Context, *ScheduledEvent) (*Response, error)
	// should return those events which haven't expired yet
	NextSchedules(context.Context, *Schedules) (*ScheduledEvents, error)
	// should return those events which are expired
	ExpiredSchedules(context.Context, *Schedules) (*ScheduledEvents, error)
	List(context.Context, *ListEventFilter) (*ScheduledEvents, error)
	Validate(context.Context, *ScheduledEvent) (*Response, error)
	LoadBySourceId(context.Context, *Request) (*ScheduledEvents, error)
}

func RegisterScheduledEventServiceServer(s *grpc.Server, srv ScheduledEventServiceServer) {
	s.RegisterService(&_ScheduledEventService_serviceDesc, srv)
}

func _ScheduledEventService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).Load(ctx, req.(*ScheduledEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).Remove(ctx, req.(*ScheduledEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).Create(ctx, req.(*ScheduledEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).Update(ctx, req.(*ScheduledEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_NextSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schedules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).NextSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/NextSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).NextSchedules(ctx, req.(*Schedules))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_ExpiredSchedules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Schedules)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).ExpiredSchedules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/ExpiredSchedules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).ExpiredSchedules(ctx, req.(*Schedules))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEventFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).List(ctx, req.(*ListEventFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduledEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).Validate(ctx, req.(*ScheduledEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScheduledEventService_LoadBySourceId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScheduledEventServiceServer).LoadBySourceId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ScheduledEventService/LoadBySourceId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScheduledEventServiceServer).LoadBySourceId(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScheduledEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ScheduledEventService",
	HandlerType: (*ScheduledEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ScheduledEventService_Ping_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _ScheduledEventService_Load_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _ScheduledEventService_Remove_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ScheduledEventService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ScheduledEventService_Update_Handler,
		},
		{
			MethodName: "NextSchedules",
			Handler:    _ScheduledEventService_NextSchedules_Handler,
		},
		{
			MethodName: "ExpiredSchedules",
			Handler:    _ScheduledEventService_ExpiredSchedules_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ScheduledEventService_List_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _ScheduledEventService_Validate_Handler,
		},
		{
			MethodName: "LoadBySourceId",
			Handler:    _ScheduledEventService_LoadBySourceId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduled-event-service.proto",
}

func init() {
	proto.RegisterFile("scheduled-event-service.proto", fileDescriptor_scheduled_event_service_34edcce76353935a)
}

var fileDescriptor_scheduled_event_service_34edcce76353935a = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x51, 0x4b, 0xeb, 0x30,
	0x18, 0xdd, 0x46, 0x29, 0xbb, 0xdf, 0xee, 0x76, 0x2f, 0xb9, 0x0c, 0x46, 0xe1, 0xa2, 0x54, 0x04,
	0xc1, 0x2d, 0x93, 0xa9, 0xe0, 0xb3, 0x32, 0x41, 0x18, 0x22, 0x9d, 0xfa, 0xde, 0x2e, 0x9f, 0x5b,
	0xa0, 0x6b, 0x62, 0x92, 0xce, 0xf9, 0xec, 0x1f, 0x97, 0x25, 0x1d, 0xba, 0x59, 0x61, 0xbe, 0x35,
	0xdf, 0x39, 0x27, 0xe7, 0x7c, 0x3d, 0x81, 0xff, 0x7a, 0x32, 0x43, 0x96, 0xa7, 0xc8, 0x7a, 0xb8,
	0xc0, 0xcc, 0xf4, 0x34, 0xaa, 0x05, 0x9f, 0x20, 0x95, 0x4a, 0x18, 0x41, 0x6a, 0x32, 0x09, 0xf6,
	0xa6, 0x42, 0x4c, 0x53, 0xec, 0xdb, 0x49, 0x92, 0x3f, 0xf5, 0x0d, 0x9f, 0xa3, 0x36, 0xf1, 0x5c,
	0x3a, 0x52, 0xd0, 0x52, 0xa8, 0xa5, 0xc8, 0x74, 0x21, 0x0a, 0x9a, 0x0a, 0x9f, 0x73, 0xd4, 0xa6,
	0x38, 0xb6, 0xb7, 0x2c, 0xdc, 0x38, 0x9c, 0xc1, 0xaf, 0x71, 0x01, 0x68, 0x72, 0x0c, 0xbe, 0xc5,
	0x74, 0xa7, 0xba, 0x5f, 0x3d, 0x6a, 0x0c, 0xfe, 0x51, 0x99, 0xd0, 0x35, 0xcc, 0x86, 0x16, 0x8a,
	0x0a, 0x0a, 0xa1, 0xe0, 0xbd, 0xcc, 0x30, 0xeb, 0xd4, 0x2c, 0x35, 0xa0, 0x2e, 0x1f, 0x5d, 0xe7,
	0xa3, 0xf7, 0xeb, 0x7c, 0x91, 0xe5, 0x85, 0x87, 0xf0, 0x67, 0xc4, 0xb5, 0xb1, 0xb7, 0x5c, 0xf3,
	0xd4, 0xa0, 0x22, 0x04, 0x3c, 0x8d, 0x99, 0xb1, 0x6e, 0xf5, 0xc8, 0x7e, 0x0f, 0xde, 0x3c, 0x68,
	0x6f, 0x5a, 0x8e, 0xdd, 0xbf, 0x20, 0x07, 0xe0, 0xdd, 0xf1, 0x6c, 0x4a, 0x1a, 0xab, 0x54, 0x91,
	0x5b, 0x2e, 0xf8, 0xed, 0x0e, 0x6e, 0xf3, 0xb0, 0x42, 0x4e, 0xc0, 0x1b, 0x89, 0x98, 0x11, 0xf2,
	0x35, 0x7a, 0x50, 0x32, 0x0b, 0x2b, 0xa4, 0x0b, 0x7e, 0x84, 0x73, 0xb1, 0xc0, 0x52, 0xcd, 0xf6,
	0xfd, 0x5d, 0xf0, 0xaf, 0x14, 0xc6, 0x66, 0x67, 0xf6, 0x83, 0x64, 0xbb, 0xb2, 0xcf, 0xa1, 0x79,
	0x8b, 0x4b, 0xf3, 0xd1, 0x47, 0xf3, 0xb3, 0x48, 0x07, 0x65, 0x75, 0x84, 0x15, 0x72, 0x01, 0x7f,
	0x87, 0x4b, 0xc9, 0x15, 0xb2, 0x9f, 0x2a, 0x07, 0xe0, 0xad, 0x2a, 0x21, 0x16, 0xde, 0x2a, 0xe7,
	0x3b, 0x0d, 0x85, 0xfa, 0x63, 0x9c, 0xf2, 0x9d, 0x97, 0x3a, 0x83, 0xd6, 0xaa, 0x90, 0xcb, 0xd7,
	0xb1, 0xc8, 0xd5, 0x04, 0x6f, 0xd8, 0x66, 0x7f, 0xe5, 0x2e, 0x89, 0x6f, 0x9f, 0xd1, 0xe9, 0x7b,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0xf9, 0x17, 0x82, 0x19, 0x03, 0x00, 0x00,
}
