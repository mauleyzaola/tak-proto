// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lab-material-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListLabMaterial struct {
	Materials            []*LabMaterial `protobuf:"bytes,1,rep,name=materials,proto3" json:"materials,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ListLabMaterial) Reset()         { *m = ListLabMaterial{} }
func (m *ListLabMaterial) String() string { return proto.CompactTextString(m) }
func (*ListLabMaterial) ProtoMessage()    {}
func (*ListLabMaterial) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_material_service_d37beb3ff2cb75c8, []int{0}
}
func (m *ListLabMaterial) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListLabMaterial.Unmarshal(m, b)
}
func (m *ListLabMaterial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListLabMaterial.Marshal(b, m, deterministic)
}
func (dst *ListLabMaterial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListLabMaterial.Merge(dst, src)
}
func (m *ListLabMaterial) XXX_Size() int {
	return xxx_messageInfo_ListLabMaterial.Size(m)
}
func (m *ListLabMaterial) XXX_DiscardUnknown() {
	xxx_messageInfo_ListLabMaterial.DiscardUnknown(m)
}

var xxx_messageInfo_ListLabMaterial proto.InternalMessageInfo

func (m *ListLabMaterial) GetMaterials() []*LabMaterial {
	if m != nil {
		return m.Materials
	}
	return nil
}

type GridMaterialRequest struct {
	Grid                 *GridInput `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GridMaterialRequest) Reset()         { *m = GridMaterialRequest{} }
func (m *GridMaterialRequest) String() string { return proto.CompactTextString(m) }
func (*GridMaterialRequest) ProtoMessage()    {}
func (*GridMaterialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_material_service_d37beb3ff2cb75c8, []int{1}
}
func (m *GridMaterialRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridMaterialRequest.Unmarshal(m, b)
}
func (m *GridMaterialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridMaterialRequest.Marshal(b, m, deterministic)
}
func (dst *GridMaterialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridMaterialRequest.Merge(dst, src)
}
func (m *GridMaterialRequest) XXX_Size() int {
	return xxx_messageInfo_GridMaterialRequest.Size(m)
}
func (m *GridMaterialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GridMaterialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GridMaterialRequest proto.InternalMessageInfo

func (m *GridMaterialRequest) GetGrid() *GridInput {
	if m != nil {
		return m.Grid
	}
	return nil
}

type GridMaterial struct {
	Grid                 *GridOutput    `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Rows                 []*LabMaterial `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GridMaterial) Reset()         { *m = GridMaterial{} }
func (m *GridMaterial) String() string { return proto.CompactTextString(m) }
func (*GridMaterial) ProtoMessage()    {}
func (*GridMaterial) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_material_service_d37beb3ff2cb75c8, []int{2}
}
func (m *GridMaterial) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridMaterial.Unmarshal(m, b)
}
func (m *GridMaterial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridMaterial.Marshal(b, m, deterministic)
}
func (dst *GridMaterial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridMaterial.Merge(dst, src)
}
func (m *GridMaterial) XXX_Size() int {
	return xxx_messageInfo_GridMaterial.Size(m)
}
func (m *GridMaterial) XXX_DiscardUnknown() {
	xxx_messageInfo_GridMaterial.DiscardUnknown(m)
}

var xxx_messageInfo_GridMaterial proto.InternalMessageInfo

func (m *GridMaterial) GetGrid() *GridOutput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *GridMaterial) GetRows() []*LabMaterial {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*ListLabMaterial)(nil), "pb.ListLabMaterial")
	proto.RegisterType((*GridMaterialRequest)(nil), "pb.GridMaterialRequest")
	proto.RegisterType((*GridMaterial)(nil), "pb.GridMaterial")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LabMaterialServiceClient is the client API for LabMaterialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LabMaterialServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*LabMaterial, error)
	Create(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*Response, error)
	Remove(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*ListLabMaterial, error)
	Validate(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*Response, error)
	Grid(ctx context.Context, in *GridMaterialRequest, opts ...grpc.CallOption) (*GridMaterial, error)
}

type labMaterialServiceClient struct {
	cc *grpc.ClientConn
}

func NewLabMaterialServiceClient(cc *grpc.ClientConn) LabMaterialServiceClient {
	return &labMaterialServiceClient{cc}
}

func (c *labMaterialServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabMaterialService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labMaterialServiceClient) Load(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*LabMaterial, error) {
	out := new(LabMaterial)
	err := c.cc.Invoke(ctx, "/pb.LabMaterialService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labMaterialServiceClient) Create(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabMaterialService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labMaterialServiceClient) Update(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabMaterialService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labMaterialServiceClient) Remove(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabMaterialService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labMaterialServiceClient) List(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*ListLabMaterial, error) {
	out := new(ListLabMaterial)
	err := c.cc.Invoke(ctx, "/pb.LabMaterialService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labMaterialServiceClient) Validate(ctx context.Context, in *LabMaterial, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabMaterialService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labMaterialServiceClient) Grid(ctx context.Context, in *GridMaterialRequest, opts ...grpc.CallOption) (*GridMaterial, error) {
	out := new(GridMaterial)
	err := c.cc.Invoke(ctx, "/pb.LabMaterialService/Grid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabMaterialServiceServer is the server API for LabMaterialService service.
type LabMaterialServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Load(context.Context, *LabMaterial) (*LabMaterial, error)
	Create(context.Context, *LabMaterial) (*Response, error)
	Update(context.Context, *LabMaterial) (*Response, error)
	Remove(context.Context, *LabMaterial) (*Response, error)
	List(context.Context, *LabMaterial) (*ListLabMaterial, error)
	Validate(context.Context, *LabMaterial) (*Response, error)
	Grid(context.Context, *GridMaterialRequest) (*GridMaterial, error)
}

func RegisterLabMaterialServiceServer(s *grpc.Server, srv LabMaterialServiceServer) {
	s.RegisterService(&_LabMaterialService_serviceDesc, srv)
}

func _LabMaterialService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabMaterialServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabMaterialService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabMaterialServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabMaterialService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabMaterialServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabMaterialService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabMaterialServiceServer).Load(ctx, req.(*LabMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabMaterialService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabMaterialServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabMaterialService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabMaterialServiceServer).Create(ctx, req.(*LabMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabMaterialService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabMaterialServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabMaterialService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabMaterialServiceServer).Update(ctx, req.(*LabMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabMaterialService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabMaterialServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabMaterialService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabMaterialServiceServer).Remove(ctx, req.(*LabMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabMaterialService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabMaterialServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabMaterialService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabMaterialServiceServer).List(ctx, req.(*LabMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabMaterialService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabMaterial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabMaterialServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabMaterialService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabMaterialServiceServer).Validate(ctx, req.(*LabMaterial))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabMaterialService_Grid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GridMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabMaterialServiceServer).Grid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabMaterialService/Grid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabMaterialServiceServer).Grid(ctx, req.(*GridMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LabMaterialService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LabMaterialService",
	HandlerType: (*LabMaterialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LabMaterialService_Ping_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _LabMaterialService_Load_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LabMaterialService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LabMaterialService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _LabMaterialService_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LabMaterialService_List_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _LabMaterialService_Validate_Handler,
		},
		{
			MethodName: "Grid",
			Handler:    _LabMaterialService_Grid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lab-material-service.proto",
}

func init() {
	proto.RegisterFile("lab-material-service.proto", fileDescriptor_lab_material_service_d37beb3ff2cb75c8)
}

var fileDescriptor_lab_material_service_d37beb3ff2cb75c8 = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xcd, 0x4f, 0xc2, 0x30,
	0x14, 0x1f, 0xb8, 0x10, 0x7d, 0x7c, 0x99, 0xc7, 0x41, 0xd2, 0x13, 0xd6, 0x0b, 0x68, 0xd8, 0x01,
	0x2e, 0x1e, 0x4d, 0x3c, 0x18, 0x13, 0x8c, 0x06, 0xa3, 0x9e, 0x3b, 0xd7, 0x90, 0x26, 0x40, 0x6b,
	0xdb, 0xe1, 0xbf, 0xee, 0xd1, 0x74, 0xdd, 0x70, 0x0c, 0x0f, 0xbb, 0xad, 0xbf, 0xaf, 0xf7, 0xf2,
	0x7e, 0x03, 0xb2, 0x66, 0xf1, 0x74, 0xc3, 0x2c, 0xd7, 0x82, 0xad, 0xa7, 0x86, 0xeb, 0x9d, 0xf8,
	0xe4, 0x91, 0xd2, 0xd2, 0x4a, 0x6c, 0xaa, 0x98, 0x60, 0x99, 0xf7, 0x38, 0xe9, 0x6a, 0xfe, 0x95,
	0x72, 0x63, 0xf3, 0x67, 0x4f, 0x73, 0xa3, 0xe4, 0xd6, 0xe4, 0x36, 0x02, 0x2b, 0x2d, 0x12, 0xff,
	0x4d, 0xef, 0xa0, 0xbf, 0x10, 0xc6, 0x2e, 0x58, 0xfc, 0x94, 0x67, 0xe0, 0x14, 0xce, 0x8a, 0x3c,
	0x33, 0x6c, 0x8c, 0x4e, 0xc6, 0xed, 0x59, 0x3f, 0x52, 0x71, 0x54, 0xd2, 0x2c, 0xff, 0x14, 0xf4,
	0x16, 0x06, 0x0f, 0x5a, 0x24, 0x7b, 0xca, 0x8f, 0xc6, 0x4b, 0x08, 0xdd, 0x98, 0x61, 0x63, 0xd4,
	0x18, 0xb7, 0x67, 0x5d, 0x17, 0xe0, 0x64, 0x8f, 0x5b, 0x95, 0xda, 0x65, 0x46, 0xd1, 0x0f, 0xe8,
	0x94, 0x9d, 0x48, 0x0f, 0x2c, 0xbd, 0xc2, 0xf2, 0x9c, 0xda, 0xbd, 0x07, 0xaf, 0x20, 0xd4, 0xf2,
	0xdb, 0x0c, 0x9b, 0xff, 0xef, 0x95, 0x91, 0xb3, 0x9f, 0x26, 0x60, 0x09, 0x7d, 0xf5, 0x47, 0x73,
	0xde, 0x17, 0xb1, 0x5d, 0x61, 0xdb, 0xb9, 0xf2, 0x3d, 0x49, 0xc7, 0x3f, 0xfc, 0x81, 0x68, 0x80,
	0xd7, 0x10, 0x2e, 0x24, 0x4b, 0xb0, 0x1a, 0x4d, 0xaa, 0x00, 0x0d, 0x70, 0x02, 0xad, 0x7b, 0xcd,
	0x99, 0xe5, 0xc7, 0xea, 0x6a, 0xec, 0x04, 0x5a, 0x6f, 0x2a, 0xa9, 0x2b, 0x5d, 0xf2, 0x8d, 0xdc,
	0xd5, 0x90, 0x46, 0x10, 0xba, 0xf6, 0x8e, 0x85, 0x83, 0x0c, 0x38, 0x2c, 0x96, 0x06, 0x78, 0x03,
	0xa7, 0xef, 0x6c, 0x2d, 0xea, 0xed, 0x31, 0x87, 0xd0, 0x9d, 0x1f, 0x2f, 0x8a, 0x22, 0x2a, 0x15,
	0x93, 0xf3, 0x2a, 0x41, 0x83, 0xb8, 0x95, 0xfd, 0x56, 0xf3, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x95, 0x8b, 0x6a, 0xe3, 0xb7, 0x02, 0x00, 0x00,
}
