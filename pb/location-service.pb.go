// Code generated by protoc-gen-go. DO NOT EDIT.
// source: location-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LocationList struct {
	Locations            []*Location `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *LocationList) Reset()         { *m = LocationList{} }
func (m *LocationList) String() string { return proto.CompactTextString(m) }
func (*LocationList) ProtoMessage()    {}
func (*LocationList) Descriptor() ([]byte, []int) {
	return fileDescriptor_location_service_3d6bd8fa08a6ca1c, []int{0}
}
func (m *LocationList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocationList.Unmarshal(m, b)
}
func (m *LocationList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocationList.Marshal(b, m, deterministic)
}
func (dst *LocationList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationList.Merge(dst, src)
}
func (m *LocationList) XXX_Size() int {
	return xxx_messageInfo_LocationList.Size(m)
}
func (m *LocationList) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationList.DiscardUnknown(m)
}

var xxx_messageInfo_LocationList proto.InternalMessageInfo

func (m *LocationList) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

func init() {
	proto.RegisterType((*LocationList)(nil), "pb.LocationList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocationServiceClient is the client API for LocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocationServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error)
	Create(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Response, error)
	Remove(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *Location, opts ...grpc.CallOption) (*LocationList, error)
	Validate(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Response, error)
}

type locationServiceClient struct {
	cc *grpc.ClientConn
}

func NewLocationServiceClient(cc *grpc.ClientConn) LocationServiceClient {
	return &locationServiceClient{cc}
}

func (c *locationServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LocationService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) Load(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/pb.LocationService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) Create(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LocationService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) Update(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LocationService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) Remove(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LocationService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) List(ctx context.Context, in *Location, opts ...grpc.CallOption) (*LocationList, error) {
	out := new(LocationList)
	err := c.cc.Invoke(ctx, "/pb.LocationService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationServiceClient) Validate(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LocationService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationServiceServer is the server API for LocationService service.
type LocationServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Load(context.Context, *Location) (*Location, error)
	Create(context.Context, *Location) (*Response, error)
	Update(context.Context, *Location) (*Response, error)
	Remove(context.Context, *Location) (*Response, error)
	List(context.Context, *Location) (*LocationList, error)
	Validate(context.Context, *Location) (*Response, error)
}

func RegisterLocationServiceServer(s *grpc.Server, srv LocationServiceServer) {
	s.RegisterService(&_LocationService_serviceDesc, srv)
}

func _LocationService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LocationService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LocationService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).Load(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LocationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).Create(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LocationService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).Update(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LocationService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).Remove(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LocationService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).List(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LocationService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationServiceServer).Validate(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LocationService",
	HandlerType: (*LocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LocationService_Ping_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _LocationService_Load_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _LocationService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LocationService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _LocationService_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _LocationService_List_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _LocationService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location-service.proto",
}

func init() {
	proto.RegisterFile("location-service.proto", fileDescriptor_location_service_3d6bd8fa08a6ca1c)
}

var fileDescriptor_location_service_3d6bd8fa08a6ca1c = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcb, 0xc9, 0x4f, 0x4e,
	0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca,
	0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x83, 0xc9, 0x41, 0xc4, 0xa4, 0x78, 0x8b, 0x52,
	0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0xa0, 0x5c, 0xbe, 0xa2, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0x62, 0xa8,
	0x16, 0x25, 0x2b, 0x2e, 0x1e, 0x1f, 0xa8, 0x06, 0x9f, 0xcc, 0xe2, 0x12, 0x21, 0x2d, 0x2e, 0x4e,
	0x98, 0x01, 0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46, 0x3c, 0x7a, 0x05, 0x49, 0x7a, 0x30,
	0x45, 0x41, 0x08, 0x69, 0xa3, 0x15, 0x4c, 0x5c, 0xfc, 0x30, 0xf1, 0x60, 0x88, 0x43, 0x84, 0x94,
	0xb9, 0x58, 0x02, 0x32, 0xf3, 0xd2, 0x85, 0xb8, 0x41, 0x9a, 0x82, 0x20, 0x56, 0x4b, 0xf1, 0x40,
	0x38, 0x10, 0x8b, 0x95, 0x18, 0x84, 0x54, 0xb8, 0x58, 0x7c, 0xf2, 0x13, 0x53, 0x84, 0x50, 0x4c,
	0x96, 0x42, 0xe1, 0x29, 0x31, 0x08, 0xa9, 0x71, 0xb1, 0x39, 0x17, 0xa5, 0x26, 0x96, 0xa4, 0x62,
	0x53, 0x87, 0x64, 0x9a, 0x1a, 0x17, 0x5b, 0x68, 0x41, 0x0a, 0x51, 0xea, 0x82, 0x52, 0x73, 0xf3,
	0xcb, 0x08, 0xa9, 0xd3, 0xe0, 0x62, 0x01, 0x07, 0x05, 0xaa, 0x2a, 0x01, 0x64, 0x1e, 0x48, 0x1e,
	0xac, 0x92, 0x23, 0x2c, 0x31, 0x27, 0x93, 0xb0, 0xdd, 0x49, 0x6c, 0xe0, 0xd0, 0x36, 0x06, 0x04,
	0x00, 0x00, 0xff, 0xff, 0xe1, 0x90, 0xe9, 0x26, 0xba, 0x01, 0x00, 0x00,
}
