// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lab-settings-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LabSettingsServiceClient is the client API for LabSettingsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LabSettingsServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *Request, opts ...grpc.CallOption) (*LabSettings, error)
	Save(ctx context.Context, in *LabSettings, opts ...grpc.CallOption) (*Response, error)
}

type labSettingsServiceClient struct {
	cc *grpc.ClientConn
}

func NewLabSettingsServiceClient(cc *grpc.ClientConn) LabSettingsServiceClient {
	return &labSettingsServiceClient{cc}
}

func (c *labSettingsServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabSettingsService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labSettingsServiceClient) Load(ctx context.Context, in *Request, opts ...grpc.CallOption) (*LabSettings, error) {
	out := new(LabSettings)
	err := c.cc.Invoke(ctx, "/pb.LabSettingsService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *labSettingsServiceClient) Save(ctx context.Context, in *LabSettings, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.LabSettingsService/Save", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LabSettingsServiceServer is the server API for LabSettingsService service.
type LabSettingsServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Load(context.Context, *Request) (*LabSettings, error)
	Save(context.Context, *LabSettings) (*Response, error)
}

func RegisterLabSettingsServiceServer(s *grpc.Server, srv LabSettingsServiceServer) {
	s.RegisterService(&_LabSettingsService_serviceDesc, srv)
}

func _LabSettingsService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabSettingsServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabSettingsService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabSettingsServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabSettingsService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabSettingsServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabSettingsService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabSettingsServiceServer).Load(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LabSettingsService_Save_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LabSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LabSettingsServiceServer).Save(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.LabSettingsService/Save",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LabSettingsServiceServer).Save(ctx, req.(*LabSettings))
	}
	return interceptor(ctx, in, info, handler)
}

var _LabSettingsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.LabSettingsService",
	HandlerType: (*LabSettingsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _LabSettingsService_Ping_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _LabSettingsService_Load_Handler,
		},
		{
			MethodName: "Save",
			Handler:    _LabSettingsService_Save_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lab-settings-service.proto",
}

func init() {
	proto.RegisterFile("lab-settings-service.proto", fileDescriptor_lab_settings_service_5f466fdc18ea1add)
}

var fileDescriptor_lab_settings_service_5f466fdc18ea1add = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0x49, 0x4c, 0xd2,
	0x2d, 0x4e, 0x2d, 0x29, 0xc9, 0xcc, 0x4b, 0x2f, 0xd6, 0x2d, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x2b, 0x4a, 0x2d, 0x2e,
	0xc8, 0xcf, 0x2b, 0x86, 0x8a, 0x49, 0xf1, 0x16, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x40, 0xb9,
	0x42, 0xc8, 0xda, 0x21, 0x62, 0x46, 0x5d, 0x8c, 0x5c, 0x42, 0x3e, 0x89, 0x49, 0xc1, 0x50, 0xd1,
	0x60, 0x88, 0x99, 0x42, 0xca, 0x5c, 0x2c, 0x01, 0x99, 0x79, 0xe9, 0x42, 0xdc, 0x7a, 0x05, 0x49,
	0x7a, 0x41, 0x10, 0x53, 0xa4, 0x78, 0x20, 0x1c, 0x88, 0x15, 0x4a, 0x0c, 0x42, 0x6a, 0x5c, 0x2c,
	0x3e, 0xf9, 0x89, 0x29, 0xa8, 0x8a, 0xf8, 0x41, 0x1c, 0x24, 0x13, 0x95, 0x18, 0x84, 0xd4, 0xb9,
	0x58, 0x82, 0x13, 0xcb, 0x52, 0x85, 0xd0, 0xa5, 0xd0, 0x0d, 0x4c, 0x62, 0x03, 0xbb, 0xc9, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xdc, 0xae, 0x06, 0xc3, 0xe8, 0x00, 0x00, 0x00,
}
