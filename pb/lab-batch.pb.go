// Code generated by protoc-gen-go. DO NOT EDIT.
// source: lab-batch.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LabBatch struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Location             *Location            `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	Batch                string               `protobuf:"bytes,3,opt,name=Batch,proto3" json:"Batch,omitempty"`
	SupplierBatch        string               `protobuf:"bytes,4,opt,name=SupplierBatch,proto3" json:"SupplierBatch,omitempty"`
	Stock                float64              `protobuf:"fixed64,5,opt,name=stock,proto3" json:"stock,omitempty"`
	Date                 *timestamp.Timestamp `protobuf:"bytes,6,opt,name=date,proto3" json:"date,omitempty"`
	Expires              *timestamp.Timestamp `protobuf:"bytes,7,opt,name=expires,proto3" json:"expires,omitempty"`
	Supplier             *Supplier            `protobuf:"bytes,9,opt,name=supplier,proto3" json:"supplier,omitempty"`
	Health               int32                `protobuf:"varint,10,opt,name=health,proto3" json:"health,omitempty"`
	Inflamability        int32                `protobuf:"varint,11,opt,name=inflamability,proto3" json:"inflamability,omitempty"`
	Reactivity           int32                `protobuf:"varint,12,opt,name=reactivity,proto3" json:"reactivity,omitempty"`
	LabMaterial          *LabMaterial         `protobuf:"bytes,13,opt,name=labMaterial,proto3" json:"labMaterial,omitempty"`
	Manufactured         *timestamp.Timestamp `protobuf:"bytes,14,opt,name=manufactured,proto3" json:"manufactured,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *LabBatch) Reset()         { *m = LabBatch{} }
func (m *LabBatch) String() string { return proto.CompactTextString(m) }
func (*LabBatch) ProtoMessage()    {}
func (*LabBatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_lab_batch_46a4a887020958bf, []int{0}
}
func (m *LabBatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LabBatch.Unmarshal(m, b)
}
func (m *LabBatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LabBatch.Marshal(b, m, deterministic)
}
func (dst *LabBatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LabBatch.Merge(dst, src)
}
func (m *LabBatch) XXX_Size() int {
	return xxx_messageInfo_LabBatch.Size(m)
}
func (m *LabBatch) XXX_DiscardUnknown() {
	xxx_messageInfo_LabBatch.DiscardUnknown(m)
}

var xxx_messageInfo_LabBatch proto.InternalMessageInfo

func (m *LabBatch) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *LabBatch) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *LabBatch) GetBatch() string {
	if m != nil {
		return m.Batch
	}
	return ""
}

func (m *LabBatch) GetSupplierBatch() string {
	if m != nil {
		return m.SupplierBatch
	}
	return ""
}

func (m *LabBatch) GetStock() float64 {
	if m != nil {
		return m.Stock
	}
	return 0
}

func (m *LabBatch) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *LabBatch) GetExpires() *timestamp.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

func (m *LabBatch) GetSupplier() *Supplier {
	if m != nil {
		return m.Supplier
	}
	return nil
}

func (m *LabBatch) GetHealth() int32 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *LabBatch) GetInflamability() int32 {
	if m != nil {
		return m.Inflamability
	}
	return 0
}

func (m *LabBatch) GetReactivity() int32 {
	if m != nil {
		return m.Reactivity
	}
	return 0
}

func (m *LabBatch) GetLabMaterial() *LabMaterial {
	if m != nil {
		return m.LabMaterial
	}
	return nil
}

func (m *LabBatch) GetManufactured() *timestamp.Timestamp {
	if m != nil {
		return m.Manufactured
	}
	return nil
}

func init() {
	proto.RegisterType((*LabBatch)(nil), "pb.LabBatch")
}

func init() { proto.RegisterFile("lab-batch.proto", fileDescriptor_lab_batch_46a4a887020958bf) }

var fileDescriptor_lab_batch_46a4a887020958bf = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x51, 0xb9, 0x6e, 0xe3, 0x30,
	0x10, 0x85, 0xe4, 0x7b, 0x7c, 0x01, 0xc4, 0x62, 0x41, 0xb8, 0xd8, 0x15, 0x82, 0x14, 0x6a, 0x42,
	0x23, 0x47, 0x9d, 0x22, 0xb5, 0xd3, 0x30, 0xf9, 0x81, 0xa1, 0x44, 0xdb, 0x44, 0x28, 0x93, 0x90,
	0xa8, 0x20, 0xf9, 0xf2, 0xb4, 0x81, 0x28, 0xd1, 0x47, 0xe5, 0xf2, 0x5d, 0x9c, 0x79, 0x43, 0x58,
	0x6a, 0x14, 0x77, 0x02, 0x5d, 0xb6, 0x67, 0xb6, 0x34, 0xce, 0x90, 0xd8, 0x8a, 0xd5, 0xff, 0x9d,
	0x31, 0x3b, 0x2d, 0xd7, 0x9e, 0x11, 0xf5, 0x76, 0xed, 0x54, 0x21, 0x2b, 0x87, 0x85, 0x6d, 0x4d,
	0x2b, 0xd2, 0xa4, 0x0a, 0x74, 0xb2, 0x54, 0xa8, 0x3b, 0x6e, 0xa1, 0x4d, 0x86, 0x4e, 0x99, 0x43,
	0xc0, 0x55, 0x6d, 0xad, 0x56, 0xb2, 0x6c, 0xf1, 0xcd, 0x4f, 0x0f, 0xc6, 0x1b, 0x14, 0x2f, 0xcd,
	0x2c, 0xb2, 0x80, 0x58, 0xe5, 0x34, 0x4a, 0xa2, 0x74, 0xc2, 0x63, 0x95, 0x93, 0x14, 0xc6, 0x21,
	0x4e, 0xe3, 0x24, 0x4a, 0xa7, 0x0f, 0x33, 0x66, 0x05, 0xdb, 0x74, 0x1c, 0x3f, 0xaa, 0xe4, 0x0f,
	0x0c, 0xfc, 0x13, 0xb4, 0xe7, 0xc3, 0x2d, 0x20, 0xb7, 0x30, 0x7f, 0xeb, 0xc6, 0xb5, 0x6a, 0xdf,
	0xab, 0x97, 0x64, 0x93, 0xad, 0x9c, 0xc9, 0x3e, 0xe8, 0x20, 0x89, 0xd2, 0x88, 0xb7, 0x80, 0x30,
	0xe8, 0xe7, 0xe8, 0x24, 0x1d, 0xfa, 0xb9, 0x2b, 0xd6, 0x96, 0x67, 0xa1, 0x3c, 0x7b, 0x0f, 0xe5,
	0xb9, 0xf7, 0x91, 0x27, 0x18, 0xc9, 0x2f, 0xab, 0x4a, 0x59, 0xd1, 0xd1, 0xd5, 0x48, 0xb0, 0x36,
	0x0d, 0xc3, 0x41, 0xe8, 0xe4, 0xd4, 0x30, 0x2c, 0xc8, 0x8f, 0x2a, 0xf9, 0x0b, 0xc3, 0xbd, 0x44,
	0xed, 0xf6, 0x14, 0x92, 0x28, 0x1d, 0xf0, 0x0e, 0x35, 0x1d, 0xd5, 0x61, 0xab, 0xb1, 0x40, 0xa1,
	0xb4, 0x72, 0xdf, 0x74, 0xea, 0xe5, 0x4b, 0x92, 0xfc, 0x03, 0x28, 0x25, 0x66, 0x4e, 0x7d, 0x36,
	0x96, 0x99, 0xb7, 0x9c, 0x31, 0xe4, 0x1e, 0xa6, 0x1a, 0xc5, 0x6b, 0xf7, 0x77, 0x74, 0xee, 0x57,
	0x59, 0xfa, 0x63, 0x9f, 0x68, 0x7e, 0xee, 0x21, 0xcf, 0x30, 0x2b, 0xf0, 0x50, 0x6f, 0x31, 0x73,
	0x75, 0x29, 0x73, 0xba, 0xb8, 0xda, 0xfa, 0xc2, 0x2f, 0x86, 0xde, 0xf1, 0xf8, 0x1b, 0x00, 0x00,
	0xff, 0xff, 0x41, 0xf7, 0xba, 0xe4, 0x6c, 0x02, 0x00, 0x00,
}
