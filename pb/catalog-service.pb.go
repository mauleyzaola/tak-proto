// Code generated by protoc-gen-go. DO NOT EDIT.
// source: catalog-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GridCatalogRequest struct {
	Grid                 *GridInput `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Params               *Catalog   `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	Name                 string     `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *GridCatalogRequest) Reset()         { *m = GridCatalogRequest{} }
func (m *GridCatalogRequest) String() string { return proto.CompactTextString(m) }
func (*GridCatalogRequest) ProtoMessage()    {}
func (*GridCatalogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_catalog_service_db6507c8048f4f9e, []int{0}
}
func (m *GridCatalogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridCatalogRequest.Unmarshal(m, b)
}
func (m *GridCatalogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridCatalogRequest.Marshal(b, m, deterministic)
}
func (dst *GridCatalogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridCatalogRequest.Merge(dst, src)
}
func (m *GridCatalogRequest) XXX_Size() int {
	return xxx_messageInfo_GridCatalogRequest.Size(m)
}
func (m *GridCatalogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GridCatalogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GridCatalogRequest proto.InternalMessageInfo

func (m *GridCatalogRequest) GetGrid() *GridInput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *GridCatalogRequest) GetParams() *Catalog {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *GridCatalogRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GridCatalogResponse struct {
	Grid                 *GridOutput `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Rows                 []*Catalog  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	Name                 string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GridCatalogResponse) Reset()         { *m = GridCatalogResponse{} }
func (m *GridCatalogResponse) String() string { return proto.CompactTextString(m) }
func (*GridCatalogResponse) ProtoMessage()    {}
func (*GridCatalogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_catalog_service_db6507c8048f4f9e, []int{1}
}
func (m *GridCatalogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridCatalogResponse.Unmarshal(m, b)
}
func (m *GridCatalogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridCatalogResponse.Marshal(b, m, deterministic)
}
func (dst *GridCatalogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridCatalogResponse.Merge(dst, src)
}
func (m *GridCatalogResponse) XXX_Size() int {
	return xxx_messageInfo_GridCatalogResponse.Size(m)
}
func (m *GridCatalogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GridCatalogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GridCatalogResponse proto.InternalMessageInfo

func (m *GridCatalogResponse) GetGrid() *GridOutput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *GridCatalogResponse) GetRows() []*Catalog {
	if m != nil {
		return m.Rows
	}
	return nil
}

func (m *GridCatalogResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CatalogResponse struct {
	Grid                 *GridOutput `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Rows                 []*Catalog  `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CatalogResponse) Reset()         { *m = CatalogResponse{} }
func (m *CatalogResponse) String() string { return proto.CompactTextString(m) }
func (*CatalogResponse) ProtoMessage()    {}
func (*CatalogResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_catalog_service_db6507c8048f4f9e, []int{2}
}
func (m *CatalogResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CatalogResponse.Unmarshal(m, b)
}
func (m *CatalogResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CatalogResponse.Marshal(b, m, deterministic)
}
func (dst *CatalogResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CatalogResponse.Merge(dst, src)
}
func (m *CatalogResponse) XXX_Size() int {
	return xxx_messageInfo_CatalogResponse.Size(m)
}
func (m *CatalogResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CatalogResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CatalogResponse proto.InternalMessageInfo

func (m *CatalogResponse) GetGrid() *GridOutput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *CatalogResponse) GetRows() []*Catalog {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*GridCatalogRequest)(nil), "pb.GridCatalogRequest")
	proto.RegisterType((*GridCatalogResponse)(nil), "pb.GridCatalogResponse")
	proto.RegisterType((*CatalogResponse)(nil), "pb.CatalogResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CatalogServiceClient is the client API for CatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CatalogServiceClient interface {
	Validate(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Catalog, error)
	Create(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error)
	Remove(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*CatalogResponse, error)
	Grid(ctx context.Context, in *GridCatalogRequest, opts ...grpc.CallOption) (*GridCatalogResponse, error)
}

type catalogServiceClient struct {
	cc *grpc.ClientConn
}

func NewCatalogServiceClient(cc *grpc.ClientConn) CatalogServiceClient {
	return &catalogServiceClient{cc}
}

func (c *catalogServiceClient) Validate(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CatalogService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) Load(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Catalog, error) {
	out := new(Catalog)
	err := c.cc.Invoke(ctx, "/pb.CatalogService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) Create(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CatalogService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) Update(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CatalogService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) Remove(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CatalogService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) List(ctx context.Context, in *Catalog, opts ...grpc.CallOption) (*CatalogResponse, error) {
	out := new(CatalogResponse)
	err := c.cc.Invoke(ctx, "/pb.CatalogService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogServiceClient) Grid(ctx context.Context, in *GridCatalogRequest, opts ...grpc.CallOption) (*GridCatalogResponse, error) {
	out := new(GridCatalogResponse)
	err := c.cc.Invoke(ctx, "/pb.CatalogService/Grid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServiceServer is the server API for CatalogService service.
type CatalogServiceServer interface {
	Validate(context.Context, *Catalog) (*Response, error)
	Load(context.Context, *Catalog) (*Catalog, error)
	Create(context.Context, *Catalog) (*Response, error)
	Update(context.Context, *Catalog) (*Response, error)
	Remove(context.Context, *Catalog) (*Response, error)
	List(context.Context, *Catalog) (*CatalogResponse, error)
	Grid(context.Context, *GridCatalogRequest) (*GridCatalogResponse, error)
}

func RegisterCatalogServiceServer(s *grpc.Server, srv CatalogServiceServer) {
	s.RegisterService(&_CatalogService_serviceDesc, srv)
}

func _CatalogService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CatalogService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Validate(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CatalogService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Load(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CatalogService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Create(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CatalogService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Update(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CatalogService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Remove(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Catalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CatalogService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).List(ctx, req.(*Catalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogService_Grid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GridCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServiceServer).Grid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CatalogService/Grid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServiceServer).Grid(ctx, req.(*GridCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CatalogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CatalogService",
	HandlerType: (*CatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _CatalogService_Validate_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _CatalogService_Load_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CatalogService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CatalogService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CatalogService_Remove_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CatalogService_List_Handler,
		},
		{
			MethodName: "Grid",
			Handler:    _CatalogService_Grid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "catalog-service.proto",
}

func init() {
	proto.RegisterFile("catalog-service.proto", fileDescriptor_catalog_service_db6507c8048f4f9e)
}

var fileDescriptor_catalog_service_db6507c8048f4f9e = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0xc1, 0x4b, 0xfb, 0x30,
	0x14, 0xc7, 0xd7, 0xae, 0x94, 0xdf, 0xef, 0xcd, 0x55, 0x78, 0x43, 0x2d, 0xbd, 0x38, 0x2b, 0xc3,
	0x21, 0xd8, 0xc3, 0x3c, 0x79, 0xde, 0x41, 0x84, 0x81, 0x50, 0x71, 0xf7, 0x74, 0x0d, 0xa3, 0xb0,
	0x36, 0x31, 0x49, 0xe7, 0xdf, 0xe6, 0x7f, 0x27, 0x69, 0x1b, 0xd6, 0xa8, 0x30, 0x2f, 0xde, 0x92,
	0xf7, 0x3e, 0xdf, 0x7c, 0xd2, 0xf4, 0xc1, 0xd9, 0x86, 0x28, 0xb2, 0x63, 0xdb, 0x3b, 0x49, 0xc5,
	0xbe, 0xd8, 0xd0, 0x84, 0x0b, 0xa6, 0x18, 0xba, 0x3c, 0x8b, 0xc6, 0x5d, 0xab, 0x2d, 0x45, 0xb0,
	0x15, 0x45, 0xde, 0xad, 0x03, 0x41, 0x25, 0x67, 0x95, 0xec, 0xf0, 0x98, 0x03, 0x3e, 0x8a, 0x22,
	0x5f, 0xb6, 0x81, 0x94, 0xbe, 0xd5, 0x54, 0x2a, 0xbc, 0x02, 0x4f, 0x67, 0x42, 0x67, 0xea, 0xcc,
	0x47, 0x8b, 0x71, 0xc2, 0xb3, 0x44, 0x53, 0x4f, 0x15, 0xaf, 0x55, 0xda, 0xb4, 0xf0, 0x1a, 0x7c,
	0x4e, 0x04, 0x29, 0x65, 0xe8, 0x36, 0xd0, 0x48, 0x43, 0xe6, 0x98, 0xae, 0x85, 0x08, 0x5e, 0x45,
	0x4a, 0x1a, 0x0e, 0xa7, 0xce, 0xfc, 0x7f, 0xda, 0xac, 0xe3, 0x0a, 0x26, 0x96, 0xb1, 0xbd, 0x0e,
	0xc6, 0x96, 0x32, 0x30, 0xca, 0xe7, 0x5a, 0x1d, 0x9c, 0x97, 0xe0, 0x09, 0xf6, 0xae, 0x8d, 0xc3,
	0xaf, 0xc6, 0xa6, 0xf1, 0xa3, 0x6f, 0x0d, 0xa7, 0x7f, 0xe1, 0x5a, 0x7c, 0xb8, 0x10, 0x74, 0x95,
	0x97, 0xf6, 0x0f, 0xe0, 0x0d, 0xfc, 0x5b, 0x93, 0x5d, 0x91, 0x13, 0x45, 0xb1, 0x9f, 0x88, 0x4e,
	0xf4, 0xc6, 0xe8, 0xe3, 0x81, 0xbe, 0xc0, 0x8a, 0x91, 0xdc, 0x86, 0xfa, 0x9b, 0x78, 0x80, 0x33,
	0xf0, 0x97, 0x82, 0x1e, 0x3d, 0x6a, 0x06, 0xfe, 0x2b, 0xcf, 0x7f, 0x83, 0xa5, 0xb4, 0x64, 0xfb,
	0x23, 0xd8, 0x2d, 0x78, 0xab, 0x42, 0x2a, 0x1b, 0x9a, 0xf4, 0x3f, 0xfe, 0xc0, 0x3e, 0x80, 0xa7,
	0x5f, 0x0d, 0xcf, 0xcd, 0xfb, 0xd9, 0x43, 0x14, 0x5d, 0x7c, 0xab, 0x9b, 0x68, 0xe6, 0x37, 0xc3,
	0x77, 0xff, 0x19, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xe1, 0x9d, 0xfb, 0xc4, 0x02, 0x00, 0x00,
}
