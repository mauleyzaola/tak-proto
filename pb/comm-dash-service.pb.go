// Code generated by protoc-gen-go. DO NOT EDIT.
// source: comm-dash-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CommDashList struct {
	Rows                 []*CommDash `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CommDashList) Reset()         { *m = CommDashList{} }
func (m *CommDashList) String() string { return proto.CompactTextString(m) }
func (*CommDashList) ProtoMessage()    {}
func (*CommDashList) Descriptor() ([]byte, []int) {
	return fileDescriptor_comm_dash_service_70a3b0cf043acbec, []int{0}
}
func (m *CommDashList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommDashList.Unmarshal(m, b)
}
func (m *CommDashList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommDashList.Marshal(b, m, deterministic)
}
func (dst *CommDashList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommDashList.Merge(dst, src)
}
func (m *CommDashList) XXX_Size() int {
	return xxx_messageInfo_CommDashList.Size(m)
}
func (m *CommDashList) XXX_DiscardUnknown() {
	xxx_messageInfo_CommDashList.DiscardUnknown(m)
}

var xxx_messageInfo_CommDashList proto.InternalMessageInfo

func (m *CommDashList) GetRows() []*CommDash {
	if m != nil {
		return m.Rows
	}
	return nil
}

type CommDashParams struct {
	Suppliers            []string `protobuf:"bytes,1,rep,name=suppliers,proto3" json:"suppliers,omitempty"`
	Materials            []string `protobuf:"bytes,2,rep,name=materials,proto3" json:"materials,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommDashParams) Reset()         { *m = CommDashParams{} }
func (m *CommDashParams) String() string { return proto.CompactTextString(m) }
func (*CommDashParams) ProtoMessage()    {}
func (*CommDashParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_comm_dash_service_70a3b0cf043acbec, []int{1}
}
func (m *CommDashParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommDashParams.Unmarshal(m, b)
}
func (m *CommDashParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommDashParams.Marshal(b, m, deterministic)
}
func (dst *CommDashParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommDashParams.Merge(dst, src)
}
func (m *CommDashParams) XXX_Size() int {
	return xxx_messageInfo_CommDashParams.Size(m)
}
func (m *CommDashParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CommDashParams.DiscardUnknown(m)
}

var xxx_messageInfo_CommDashParams proto.InternalMessageInfo

func (m *CommDashParams) GetSuppliers() []string {
	if m != nil {
		return m.Suppliers
	}
	return nil
}

func (m *CommDashParams) GetMaterials() []string {
	if m != nil {
		return m.Materials
	}
	return nil
}

type GridCommDashRequest struct {
	Grid                 *GridInput      `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Params               *CommDashParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GridCommDashRequest) Reset()         { *m = GridCommDashRequest{} }
func (m *GridCommDashRequest) String() string { return proto.CompactTextString(m) }
func (*GridCommDashRequest) ProtoMessage()    {}
func (*GridCommDashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comm_dash_service_70a3b0cf043acbec, []int{2}
}
func (m *GridCommDashRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridCommDashRequest.Unmarshal(m, b)
}
func (m *GridCommDashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridCommDashRequest.Marshal(b, m, deterministic)
}
func (dst *GridCommDashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridCommDashRequest.Merge(dst, src)
}
func (m *GridCommDashRequest) XXX_Size() int {
	return xxx_messageInfo_GridCommDashRequest.Size(m)
}
func (m *GridCommDashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GridCommDashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GridCommDashRequest proto.InternalMessageInfo

func (m *GridCommDashRequest) GetGrid() *GridInput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *GridCommDashRequest) GetParams() *CommDashParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type GridCommDash struct {
	Grid                 *GridOutput `protobuf:"bytes,1,opt,name=grid,proto3" json:"grid,omitempty"`
	Rows                 []*CommDash `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *GridCommDash) Reset()         { *m = GridCommDash{} }
func (m *GridCommDash) String() string { return proto.CompactTextString(m) }
func (*GridCommDash) ProtoMessage()    {}
func (*GridCommDash) Descriptor() ([]byte, []int) {
	return fileDescriptor_comm_dash_service_70a3b0cf043acbec, []int{3}
}
func (m *GridCommDash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GridCommDash.Unmarshal(m, b)
}
func (m *GridCommDash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GridCommDash.Marshal(b, m, deterministic)
}
func (dst *GridCommDash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GridCommDash.Merge(dst, src)
}
func (m *GridCommDash) XXX_Size() int {
	return xxx_messageInfo_GridCommDash.Size(m)
}
func (m *GridCommDash) XXX_DiscardUnknown() {
	xxx_messageInfo_GridCommDash.DiscardUnknown(m)
}

var xxx_messageInfo_GridCommDash proto.InternalMessageInfo

func (m *GridCommDash) GetGrid() *GridOutput {
	if m != nil {
		return m.Grid
	}
	return nil
}

func (m *GridCommDash) GetRows() []*CommDash {
	if m != nil {
		return m.Rows
	}
	return nil
}

type CommDashCancelRequest struct {
	Dash                 *CommDash `protobuf:"bytes,1,opt,name=dash,proto3" json:"dash,omitempty"`
	User                 *User     `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Reason               string    `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CommDashCancelRequest) Reset()         { *m = CommDashCancelRequest{} }
func (m *CommDashCancelRequest) String() string { return proto.CompactTextString(m) }
func (*CommDashCancelRequest) ProtoMessage()    {}
func (*CommDashCancelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_comm_dash_service_70a3b0cf043acbec, []int{4}
}
func (m *CommDashCancelRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommDashCancelRequest.Unmarshal(m, b)
}
func (m *CommDashCancelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommDashCancelRequest.Marshal(b, m, deterministic)
}
func (dst *CommDashCancelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommDashCancelRequest.Merge(dst, src)
}
func (m *CommDashCancelRequest) XXX_Size() int {
	return xxx_messageInfo_CommDashCancelRequest.Size(m)
}
func (m *CommDashCancelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommDashCancelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommDashCancelRequest proto.InternalMessageInfo

func (m *CommDashCancelRequest) GetDash() *CommDash {
	if m != nil {
		return m.Dash
	}
	return nil
}

func (m *CommDashCancelRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *CommDashCancelRequest) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func init() {
	proto.RegisterType((*CommDashList)(nil), "pb.CommDashList")
	proto.RegisterType((*CommDashParams)(nil), "pb.CommDashParams")
	proto.RegisterType((*GridCommDashRequest)(nil), "pb.GridCommDashRequest")
	proto.RegisterType((*GridCommDash)(nil), "pb.GridCommDash")
	proto.RegisterType((*CommDashCancelRequest)(nil), "pb.CommDashCancelRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommDashServiceClient is the client API for CommDashService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommDashServiceClient interface {
	Validate(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error)
	Create(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error)
	Remove(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error)
	StartProgress(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error)
	StopProgress(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error)
	Cancel(ctx context.Context, in *CommDashCancelRequest, opts ...grpc.CallOption) (*CommDash, error)
	Reopen(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error)
	Close(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error)
	NextNumber(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error)
	Grid(ctx context.Context, in *GridCommDashRequest, opts ...grpc.CallOption) (*GridCommDash, error)
	DefaultStatus(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error)
	List(ctx context.Context, in *CommDashParams, opts ...grpc.CallOption) (*CommDashList, error)
}

type commDashServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommDashServiceClient(cc *grpc.ClientConn) CommDashServiceClient {
	return &commDashServiceClient{cc}
}

func (c *commDashServiceClient) Validate(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Validate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) Create(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) Update(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) Remove(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) Load(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error) {
	out := new(CommDash)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) StartProgress(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error) {
	out := new(CommDash)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/StartProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) StopProgress(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error) {
	out := new(CommDash)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/StopProgress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) Cancel(ctx context.Context, in *CommDashCancelRequest, opts ...grpc.CallOption) (*CommDash, error) {
	out := new(CommDash)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) Reopen(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error) {
	out := new(CommDash)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Reopen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) Close(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*CommDash, error) {
	out := new(CommDash)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) NextNumber(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/NextNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) Grid(ctx context.Context, in *GridCommDashRequest, opts ...grpc.CallOption) (*GridCommDash, error) {
	out := new(GridCommDash)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/Grid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) DefaultStatus(ctx context.Context, in *CommDash, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/DefaultStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commDashServiceClient) List(ctx context.Context, in *CommDashParams, opts ...grpc.CallOption) (*CommDashList, error) {
	out := new(CommDashList)
	err := c.cc.Invoke(ctx, "/pb.CommDashService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommDashServiceServer is the server API for CommDashService service.
type CommDashServiceServer interface {
	Validate(context.Context, *CommDash) (*Response, error)
	Create(context.Context, *CommDash) (*Response, error)
	Update(context.Context, *CommDash) (*Response, error)
	Remove(context.Context, *CommDash) (*Response, error)
	Load(context.Context, *CommDash) (*CommDash, error)
	StartProgress(context.Context, *CommDash) (*CommDash, error)
	StopProgress(context.Context, *CommDash) (*CommDash, error)
	Cancel(context.Context, *CommDashCancelRequest) (*CommDash, error)
	Reopen(context.Context, *CommDash) (*CommDash, error)
	Close(context.Context, *CommDash) (*CommDash, error)
	NextNumber(context.Context, *CommDash) (*Response, error)
	Grid(context.Context, *GridCommDashRequest) (*GridCommDash, error)
	DefaultStatus(context.Context, *CommDash) (*Response, error)
	List(context.Context, *CommDashParams) (*CommDashList, error)
}

func RegisterCommDashServiceServer(s *grpc.Server, srv CommDashServiceServer) {
	s.RegisterService(&_CommDashService_serviceDesc, srv)
}

func _CommDashService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Validate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Validate(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Create(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Update(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Remove(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Load(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_StartProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).StartProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/StartProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).StartProgress(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_StopProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).StopProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/StopProgress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).StopProgress(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDashCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Cancel(ctx, req.(*CommDashCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_Reopen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Reopen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Reopen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Reopen(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Close(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_NextNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).NextNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/NextNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).NextNumber(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_Grid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GridCommDashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).Grid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/Grid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).Grid(ctx, req.(*GridCommDashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_DefaultStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).DefaultStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/DefaultStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).DefaultStatus(ctx, req.(*CommDash))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommDashService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommDashParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommDashServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CommDashService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommDashServiceServer).List(ctx, req.(*CommDashParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommDashService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CommDashService",
	HandlerType: (*CommDashServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validate",
			Handler:    _CommDashService_Validate_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _CommDashService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CommDashService_Update_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _CommDashService_Remove_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _CommDashService_Load_Handler,
		},
		{
			MethodName: "StartProgress",
			Handler:    _CommDashService_StartProgress_Handler,
		},
		{
			MethodName: "StopProgress",
			Handler:    _CommDashService_StopProgress_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _CommDashService_Cancel_Handler,
		},
		{
			MethodName: "Reopen",
			Handler:    _CommDashService_Reopen_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _CommDashService_Close_Handler,
		},
		{
			MethodName: "NextNumber",
			Handler:    _CommDashService_NextNumber_Handler,
		},
		{
			MethodName: "Grid",
			Handler:    _CommDashService_Grid_Handler,
		},
		{
			MethodName: "DefaultStatus",
			Handler:    _CommDashService_DefaultStatus_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CommDashService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comm-dash-service.proto",
}

func init() {
	proto.RegisterFile("comm-dash-service.proto", fileDescriptor_comm_dash_service_70a3b0cf043acbec)
}

var fileDescriptor_comm_dash_service_70a3b0cf043acbec = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x51, 0x6f, 0xd3, 0x30,
	0x10, 0x6e, 0xbb, 0x50, 0xad, 0xb7, 0xae, 0x43, 0x46, 0xb0, 0x50, 0xed, 0x21, 0x44, 0x80, 0xaa,
	0x89, 0x56, 0xa8, 0xfd, 0x09, 0x9d, 0x84, 0x90, 0xaa, 0x31, 0xa5, 0x8c, 0x77, 0xb7, 0x39, 0xb6,
	0x48, 0x49, 0x6c, 0x7c, 0xce, 0xe0, 0xb7, 0xf3, 0x84, 0x6c, 0xc7, 0x5d, 0x5b, 0x36, 0xa5, 0x6f,
	0xf6, 0xf7, 0x7d, 0xfe, 0xee, 0x7c, 0xe7, 0x33, 0x9c, 0xaf, 0x45, 0x51, 0x8c, 0x53, 0x4e, 0xf7,
	0x63, 0x42, 0xf5, 0x90, 0xad, 0x71, 0x22, 0x95, 0xd0, 0x82, 0x75, 0xe4, 0x6a, 0x78, 0xb6, 0x21,
	0x1d, 0x38, 0x84, 0x3b, 0x95, 0xa5, 0xf5, 0x7a, 0xa0, 0x90, 0xa4, 0x28, 0x09, 0x3d, 0x57, 0x11,
	0x2a, 0xb7, 0x8e, 0x3f, 0x43, 0x7f, 0x2e, 0x8a, 0xe2, 0x8a, 0xd3, 0xfd, 0x22, 0x23, 0xcd, 0x22,
	0x08, 0x94, 0xf8, 0x4d, 0x61, 0x3b, 0x3a, 0x1a, 0x9d, 0x4c, 0xfb, 0x13, 0xb9, 0x9a, 0x78, 0x3e,
	0xb1, 0x4c, 0xbc, 0x80, 0x81, 0x47, 0x6e, 0xb8, 0xe2, 0x05, 0xb1, 0x0b, 0xe8, 0x51, 0x25, 0x65,
	0x9e, 0xa1, 0x72, 0x07, 0x7b, 0xc9, 0x23, 0x60, 0xd8, 0x82, 0x6b, 0x54, 0x19, 0xcf, 0x29, 0xec,
	0x38, 0x76, 0x03, 0xc4, 0x29, 0xbc, 0xfa, 0xa2, 0xb2, 0x74, 0x13, 0x03, 0x7f, 0x55, 0x48, 0x9a,
	0xbd, 0x83, 0xc0, 0x5c, 0x20, 0x6c, 0x47, 0xed, 0xd1, 0xc9, 0xf4, 0xd4, 0xa4, 0x61, 0x64, 0x5f,
	0x4b, 0x59, 0xe9, 0xc4, 0x52, 0xec, 0x12, 0xba, 0xd2, 0xc6, 0x0f, 0x3b, 0x56, 0xc4, 0xb6, 0x73,
	0x75, 0x99, 0x25, 0xb5, 0x22, 0xfe, 0x0e, 0xfd, 0xed, 0x28, 0x2c, 0xde, 0xb1, 0x1f, 0x78, 0xfb,
	0x6f, 0x95, 0x7e, 0xf4, 0xf7, 0x95, 0xe8, 0x3c, 0x5b, 0x09, 0x01, 0xaf, 0x3d, 0x32, 0xe7, 0xe5,
	0x1a, 0x73, 0x9f, 0x7d, 0x04, 0x81, 0x69, 0x45, 0x6d, 0xbf, 0x77, 0xd4, 0x30, 0xec, 0x02, 0x02,
	0xd3, 0x84, 0x3a, 0xf5, 0x63, 0xa3, 0xb8, 0x25, 0x54, 0x89, 0x45, 0xd9, 0x1b, 0xe8, 0x2a, 0xe4,
	0x24, 0xca, 0xf0, 0x28, 0x6a, 0x8f, 0x7a, 0x49, 0xbd, 0x9b, 0xfe, 0x0d, 0xe0, 0xcc, 0x1b, 0x2d,
	0xdd, 0x1b, 0x60, 0x23, 0x38, 0xfe, 0xc1, 0xf3, 0x2c, 0xe5, 0x1a, 0xd9, 0x4e, 0xa4, 0xa1, 0xdd,
	0x25, 0x75, 0xeb, 0xe3, 0x16, 0xfb, 0x08, 0xdd, 0xb9, 0xc2, 0x83, 0x74, 0xb7, 0xf2, 0x30, 0xbf,
	0x04, 0x0b, 0xf1, 0xd0, 0xa4, 0x7b, 0x0f, 0xc1, 0x42, 0xf0, 0xf4, 0x29, 0x95, 0xdf, 0xc5, 0x2d,
	0x36, 0x86, 0xd3, 0xa5, 0xe6, 0x4a, 0xdf, 0x28, 0x71, 0xa7, 0x90, 0xa8, 0x41, 0xfe, 0x09, 0xfa,
	0x4b, 0x2d, 0xe4, 0x81, 0xea, 0x19, 0x74, 0x5d, 0x87, 0xd8, 0xdb, 0x6d, 0x66, 0xa7, 0x6b, 0xff,
	0x1d, 0xb2, 0xf7, 0x13, 0x12, 0xcb, 0x06, 0xf3, 0x0f, 0xf0, 0x62, 0x9e, 0x0b, 0xc2, 0x06, 0xd9,
	0x25, 0xc0, 0x35, 0xfe, 0xd1, 0xd7, 0x55, 0xb1, 0x42, 0xd5, 0x50, 0xb2, 0x19, 0x04, 0xe6, 0x3d,
	0xb2, 0x73, 0xff, 0x32, 0xf7, 0xe6, 0x63, 0xf8, 0x72, 0x9f, 0x70, 0x15, 0xbc, 0xc2, 0x9f, 0xbc,
	0xca, 0xf5, 0x52, 0x73, 0x5d, 0x51, 0x43, 0x8c, 0x09, 0x04, 0x76, 0xe2, 0x9f, 0x98, 0x1b, 0x67,
	0xbf, 0xfd, 0x2f, 0xc4, 0xad, 0x55, 0xd7, 0x7e, 0x18, 0xb3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x0d, 0x7e, 0x0e, 0x81, 0x88, 0x04, 0x00, 0x00,
}
