// Code generated by protoc-gen-go. DO NOT EDIT.
// source: session-service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SessionRequest struct {
	Session              *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SessionRequest) Reset()         { *m = SessionRequest{} }
func (m *SessionRequest) String() string { return proto.CompactTextString(m) }
func (*SessionRequest) ProtoMessage()    {}
func (*SessionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_service_36bc8b51145ac660, []int{0}
}
func (m *SessionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionRequest.Unmarshal(m, b)
}
func (m *SessionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionRequest.Marshal(b, m, deterministic)
}
func (dst *SessionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionRequest.Merge(dst, src)
}
func (m *SessionRequest) XXX_Size() int {
	return xxx_messageInfo_SessionRequest.Size(m)
}
func (m *SessionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SessionRequest proto.InternalMessageInfo

func (m *SessionRequest) GetSession() *Session {
	if m != nil {
		return m.Session
	}
	return nil
}

type SessionListResponse struct {
	Rows                 []*Session `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SessionListResponse) Reset()         { *m = SessionListResponse{} }
func (m *SessionListResponse) String() string { return proto.CompactTextString(m) }
func (*SessionListResponse) ProtoMessage()    {}
func (*SessionListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_session_service_36bc8b51145ac660, []int{1}
}
func (m *SessionListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionListResponse.Unmarshal(m, b)
}
func (m *SessionListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionListResponse.Marshal(b, m, deterministic)
}
func (dst *SessionListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionListResponse.Merge(dst, src)
}
func (m *SessionListResponse) XXX_Size() int {
	return xxx_messageInfo_SessionListResponse.Size(m)
}
func (m *SessionListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SessionListResponse proto.InternalMessageInfo

func (m *SessionListResponse) GetRows() []*Session {
	if m != nil {
		return m.Rows
	}
	return nil
}

func init() {
	proto.RegisterType((*SessionRequest)(nil), "pb.SessionRequest")
	proto.RegisterType((*SessionListResponse)(nil), "pb.SessionListResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionServiceClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Load(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Session, error)
	Remove(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Create(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Session, error)
	List(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionListResponse, error)
}

type sessionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSessionServiceClient(cc *grpc.ClientConn) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.SessionService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) Load(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/pb.SessionService/Load", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) Remove(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.SessionService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) Create(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/pb.SessionService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) List(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionListResponse, error) {
	out := new(SessionListResponse)
	err := c.cc.Invoke(ctx, "/pb.SessionService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
type SessionServiceServer interface {
	Ping(context.Context, *Request) (*Response, error)
	Load(context.Context, *Request) (*Session, error)
	Remove(context.Context, *Request) (*Response, error)
	Create(context.Context, *SessionRequest) (*Session, error)
	List(context.Context, *SessionRequest) (*SessionListResponse, error)
}

func RegisterSessionServiceServer(s *grpc.Server, srv SessionServiceServer) {
	s.RegisterService(&_SessionService_serviceDesc, srv)
}

func _SessionService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_Load_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Load(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionService/Load",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Load(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Remove(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).Create(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.SessionService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).List(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SessionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SessionService_Ping_Handler,
		},
		{
			MethodName: "Load",
			Handler:    _SessionService_Load_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _SessionService_Remove_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SessionService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SessionService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session-service.proto",
}

func init() {
	proto.RegisterFile("session-service.proto", fileDescriptor_session_service_36bc8b51145ac660)
}

var fileDescriptor_session_service_36bc8b51145ac660 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xcd, 0x4a, 0xc4, 0x30,
	0x10, 0x6e, 0x34, 0x54, 0x98, 0xd5, 0x3d, 0x8c, 0x88, 0x4b, 0x2f, 0x2e, 0x91, 0x05, 0x41, 0xec,
	0xa1, 0xa2, 0x3e, 0x80, 0xd7, 0x1e, 0xa4, 0x7d, 0x82, 0x56, 0x07, 0xc9, 0xc1, 0x26, 0x66, 0x62,
	0x7d, 0x61, 0x1f, 0x44, 0x6c, 0x52, 0x89, 0x52, 0xf6, 0xf8, 0xfd, 0xcc, 0x37, 0xdf, 0x0c, 0x9c,
	0x31, 0x31, 0x6b, 0x33, 0xdc, 0x30, 0xb9, 0x51, 0x3f, 0x53, 0x69, 0x9d, 0xf1, 0x06, 0x0f, 0x6c,
	0x5f, 0xac, 0x1d, 0xb1, 0x35, 0x03, 0x47, 0xae, 0x38, 0x89, 0xd6, 0x19, 0x3a, 0x7a, 0xff, 0x20,
	0xf6, 0x01, 0xaa, 0x07, 0x58, 0xb7, 0x41, 0x6f, 0x02, 0x8f, 0x3b, 0x38, 0x8a, 0x13, 0x1b, 0xb1,
	0x15, 0x57, 0xab, 0x6a, 0x55, 0xda, 0xbe, 0x9c, 0x4d, 0xb3, 0xa6, 0xee, 0xe1, 0x34, 0x72, 0xb5,
	0x66, 0xdf, 0xc4, 0x9d, 0x78, 0x01, 0xd2, 0x99, 0x4f, 0xde, 0x88, 0xed, 0xe1, 0xff, 0xd1, 0x49,
	0xa8, 0xbe, 0xc4, 0xef, 0xc6, 0x36, 0x74, 0xc7, 0x4b, 0x90, 0x4f, 0x7a, 0x78, 0xc5, 0xc9, 0x1d,
	0x6b, 0x14, 0xc7, 0x01, 0x84, 0x58, 0x95, 0xa1, 0x02, 0x59, 0x9b, 0xee, 0xe5, 0xaf, 0x29, 0xcd,
	0x57, 0x19, 0xee, 0x20, 0x6f, 0xe8, 0xcd, 0x8c, 0xb4, 0x3f, 0xea, 0x1a, 0xf2, 0x47, 0x47, 0x9d,
	0x27, 0xc4, 0xb4, 0xdf, 0x72, 0xe6, 0x1d, 0xc8, 0x9f, 0x03, 0x17, 0xad, 0xe7, 0x09, 0x97, 0x7e,
	0x41, 0x65, 0x7d, 0x3e, 0xbd, 0xf7, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xf0, 0xe5, 0xcc,
	0xa9, 0x01, 0x00, 0x00,
}
